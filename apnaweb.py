# -*- coding: utf-8 -*-
"""ApnaWEB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b8QmjfBCMdlVwrmV0PxRKwLMbXIJvooK
"""

#Installing Required Modules For Synchronisation and Use of Google Gemini And Other Synchronisations like Google Sheets and Authorization
!pip install -q -U google-generativeai
!pip install --upgrade -q gspread
!pip install gspread-dataframe
#Installing Dependencies and Libraries
!pip install --upgrade attrs
!pip install pdflatex
!pip install pylatex

#Downloading Latexmk
!apt-get install -y latexmk

#Downloading other dependencies For Latex Conversion to PDF's
!apt-get install texlive-latex-recommended
!apt-get install texlive-latex-extra
!apt-get install texlive-fonts-recommended
!apt-get install texlive-fonts-extra
!apt-get install texlive-lang-european
!apt-get install latexmk

#Importing Required Libraries to work on
from google.colab import userdata
from google.colab import drive
import numpy as nu
import os
import pandas as pa
import re
import os
import time
import shutil
import gspread
from gspread_dataframe import get_as_dataframe, set_with_dataframe
from oauth2client.client import GoogleCredentials
from pydrive.drive import GoogleDrive
from google.colab import auth
from google.auth import default
import pathlib
import textwrap
import google.generativeai as genai
from IPython.display import display
from IPython.display import Markdown
from pylatex.base_classes import Environment, CommandBase, Arguments
from pylatex.package import Package
from pylatex import Document, Command, UnsafeCommand
from pylatex.utils import NoEscape, italic

#Mounting Drive
drive.mount('/content/drive')

#Granting Authorisation
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

#Reading Dataset of RAW_DATA Directly Taken from HTML Form
Data=gc.open_by_url("https://docs.google.com/spreadsheets/d/1-iPAwtVqsObnVguAM4puoDmneGSibH2vZB-R7hEGe3s/edit#gid=0")

#Converting the Raw_Data to Worksheets to Work on
ws=Data.worksheet("RAW_DATA") # "RAW_DATA" is the sheet-name

#Getting the Data from Worksheet as DataFrame
Data_DF=get_as_dataframe(ws)

#Creating DataFrame For RAW_DATA
Data_DF=pa.DataFrame(Data_DF)
Data_DF.head()

#Creating DataFrames of Segregated DataSets

#Creating Data_Frame for Personal_Details
Personal_Details_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Personal_Details.xlsx")
Personal_Details_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv",index=None)
Personal_Details_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv")

#Creating Data_Frame for Skills
Skills_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/SKILLS.xlsx")
Skills_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/SKILLS.csv",index=None)
Skills_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/SKILLS.csv")

#Creating Data_Frame for Projects
Projects_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Projects.xlsx")
Projects_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Projects.csv",index=None)
Projects_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Projects.csv")

#Creating Data_Frame for Education-1
Education1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education1.xlsx")
Education1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education1.csv",index=None)
Education1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education1.csv")

#Creating Data_Frame for Education-2
Education2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education2.xlsx")
Education2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education2.csv",index=None)
Education2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education2.csv")

#Creating Data_Frame for Education-1
Education3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education3.xlsx")
Education3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education3.csv",index=None)
Education3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education3.csv")

#Creating Data_Frame for Workexp1
Workexp1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp1.xlsx")
Workexp1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp1.csv",index=None)
Workexp1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp1.csv")

#Creating Data_Frame for Workexp2
Workexp2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp2.xlsx")
Workexp2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp2.csv",index=None)
Workexp2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp2.csv")

#Creating Data_Frame for Workexp3
Workexp3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp3.xlsx")
Workexp3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp3.csv",index=None)
Workexp3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp3.csv")

#Printing All the Segregated-Datasets
display(Personal_Details_DF.head(),Skills_DF.head(),Projects_DF.head(),Education1_DF.head(),Education2_DF.head(),Education3_DF.head(),Workexp1_DF.head(),Workexp2_DF.head(),Workexp3_DF.head())

#Uploading Values to Segregated Data_Frames by Retrieving Data from Raw_Data Data-set
#Iterating Through The DataFrame

for index, row in Data_DF.iterrows():
    if pa.isnull(row["Name"]):
        break

    Address,Father_Name,Mother_Name, First_Name, Last_Name, Occupation, Profession, Email, Gender, DOB, Country_Code,Phone,Selected_Image = (
        row["Address"],
        row["Father_Name"],
        row["Mother_Name"],
        row["Name"],
        row["Last_Name"],
        row["Occupation"],
        row["Profession"],
        row["Email"],
        row["Gender"],
        row["DOB"],
        row["CountryCode"],
        row["Phone"],
        row["selectedImage"]

    )

    Skills = f"{row['skill1']},{row['skill2']},{row['skill3']},{row['skill4']},{row['skill5']}"

    Skill1,Skill2,Skill3,Skill4,Skill5=row['skill1'],row['skill2'],row['skill3'],row['skill4'],row['skill5']

    Languages, Hobbies = row["Languages"], row["Hobbies"]

    Project1, Project2, Project3 = row["project1"], row["project2"], row["project3"]

    Twitter, Instagram, GitHub, LinkedIn, Facebook = (
        row["Twitter"],
        row["Instagram"],
        row["GitHub"],
        row["LinkedIn"],
        row["Facebook"],
    )

    Workexp1_Designation, Workexp1_Corp_Name, Workexp1_Year_From, Workexp1_Year_To, Workexp1_Significant = (
        row["CGPA4"],
        row["Institute_Name4"],
        row["Year_From4"],
        row["Year_To4"],
        row["Signi1"],
    )

    Workexp2_Designation, Workexp2_Corp_Name, Workexp2_Year_From, Workexp2_Year_To, Workexp2_Significant = (
        row["CGPA5"],
        row["Institute_Name5"],
        row["Year_From5"],
        row["Year_To5"],
        row["Signi2"],
    )
    Workexp3_Designation, Workexp3_Corp_Name, Workexp3_Year_From, Workexp3_Year_To, Workexp3_Significant = (
        row["CGPA6"],
        row["Institute_Name6"],
        row["Year_From6"],
        row["Year_To6"],
        row["Signi3"],
    )

    Education1_Institution_Name, Education1_Institution_Address, Education1_Year_From, Education1_Year_To, Education1_CGPA = (
        row["Institute_Name1"],
        row["Institute_Address1"],
        row["Year_From1"],
        row["Year_To1"],
        row["CGPA1"],
    )

    Education2_Course, Education2_Institution_Name, Education2_Institution_Address, Education2_Year_From, Education2_Year_To, Education2_CGPA = (
        row["Course1"],
        row["Institute_Name2"],
        row["Institute_Address2"],
        row["Year_From2"],
        row["Year_To2"],
        row["CGPA2"],
    )

    Education3_Course, Education3_Institution_Name, Education3_Institution_Address, Education3_Year_From, Education3_Year_To, Education3_CGPA = (
        row["Course2"],
        row["Institute_Name3"],
        row["Institute_Address3"],
        row["Year_From3"],
        row["Year_To3"],
        row["CGPA3"],
    )

    #Uploading values to the Segregated Data_Frames

    for idx, row in Personal_Details_DF.iterrows():
      if pa.isnull(row["FIRST_NAME"]):
        Personal_Details_DF.loc[idx,"FIRST_NAME"]=First_Name
        Personal_Details_DF.loc[idx,"LAST_NAME"]=Last_Name
        Personal_Details_DF.loc[idx,"FATHER_NAME"]=Father_Name
        Personal_Details_DF.loc[idx,"MOTHER_NAME"]=Mother_Name
        Personal_Details_DF.loc[idx,"DOB"]=DOB
        Personal_Details_DF.loc[idx,"GENDER"]=Gender
        Personal_Details_DF.loc[idx,"OCCUPATION"]=Occupation
        Personal_Details_DF.loc[idx,"PROFESSION"]=Profession
        Personal_Details_DF.loc[idx,"COUNTRY_CODE"]=Country_Code
        Personal_Details_DF.loc[idx,"PHONE"]=Phone
        Personal_Details_DF.loc[idx,"EMAIL"]=Email
        Personal_Details_DF.loc[idx,"ADDRESS"]=Address
        Personal_Details_DF.loc[idx,"TWITTER"]=Twitter
        Personal_Details_DF.loc[idx,"INSTAGRAM"]=Instagram
        Personal_Details_DF.loc[idx,"GITHUB"]=GitHub
        Personal_Details_DF.loc[idx,"LINKEDIN"]=LinkedIn
        Personal_Details_DF.loc[idx,"FACEBOOK"]=Facebook
        Personal_Details_DF.loc[idx,"LANGUAGES"]=Languages
        Personal_Details_DF.loc[idx,"HOBBIES"]=Hobbies
        Personal_Details_DF.loc[idx,"SKILLS"]=Skills
        Personal_Details_DF.loc[idx,"SKILLS"]=Skills
        Personal_Details_DF.loc[idx,"SELECTED_IMAGE"]=Selected_Image

        break

    for idx, row in Skills_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Skills_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Skills_DF.loc[idx,"SKILL1"]=Skill1
        Skills_DF.loc[idx,"SKILL2"]=Skill2
        Skills_DF.loc[idx,"SKILL3"]=Skill3
        Skills_DF.loc[idx,"SKILL4"]=Skill4
        Skills_DF.loc[idx,"SKILL5"]=Skill5
        break

    for idx, row in Projects_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Projects_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Projects_DF.loc[idx,"PROJECT_1"]=Project1
        Projects_DF.loc[idx,"PROJECT_2"]=Project2
        Projects_DF.loc[idx,"PROJECT_3"]=Project3
        break

    for idx, row in Education1_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Education1_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Education1_DF.loc[idx,"INSTITUTE_NAME"]=Education1_Institution_Name
        Education1_DF.loc[idx,"INSTITUTE_ADDRESS"]=Education1_Institution_Address
        Education1_DF.loc[idx,"FROM_YEAR"]=Education1_Year_From
        Education1_DF.loc[idx,"TO_YEAR"]=Education1_Year_To
        Education1_DF.loc[idx,"CGPA"]=Education1_CGPA
        break

    for idx, row in Education2_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Education2_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Education2_DF.loc[idx,"INSTITUTE_NAME"]=Education2_Institution_Name
        Education2_DF.loc[idx,"INSTITUTE_ADDRESS"]=Education2_Institution_Address
        Education2_DF.loc[idx,"FROM_YEAR"]=Education2_Year_From
        Education2_DF.loc[idx,"TO_YEAR"]=Education2_Year_To
        Education2_DF.loc[idx,"CGPA"]=Education2_CGPA
        Education2_DF.loc[idx,"COURSE"]=Education2_Course
        break

    for idx, row in Education3_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Education3_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Education3_DF.loc[idx,"INSTITUTE_NAME"]=Education3_Institution_Name
        Education3_DF.loc[idx,"INSTITUTE_ADDRESS"]=Education3_Institution_Address
        Education3_DF.loc[idx,"FROM_YEAR"]=Education3_Year_From
        Education3_DF.loc[idx,"TO_YEAR"]=Education3_Year_To
        Education3_DF.loc[idx,"CGPA"]=Education3_CGPA
        Education3_DF.loc[idx,"COURSE"]=Education3_Course
        break

    for idx, row in Workexp1_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Workexp1_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Workexp1_DF.loc[idx,"CORPORATION_NAME"]=Workexp1_Corp_Name
        Workexp1_DF.loc[idx,"DESIGNATION"]=Workexp1_Designation
        Workexp1_DF.loc[idx,"FROM_YEAR"]= Workexp1_Year_From
        Workexp1_DF.loc[idx,"TO_YEAR"]=Workexp1_Year_To
        Workexp1_DF.loc[idx,"SIGNIFICANT_CONTRIBUTION"]=Workexp1_Significant
        break

    for idx, row in Workexp2_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Workexp2_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Workexp2_DF.loc[idx,"CORPORATION_NAME"]=Workexp2_Corp_Name
        Workexp2_DF.loc[idx,"DESIGNATION"]=Workexp2_Designation
        Workexp2_DF.loc[idx,"FROM_YEAR"]= Workexp2_Year_From
        Workexp2_DF.loc[idx,"TO_YEAR"]=Workexp2_Year_To
        Workexp2_DF.loc[idx,"SIGNIFICANT_CONTRIBUTION"]=Workexp2_Significant
        break


    for idx, row in Workexp3_DF.iterrows():
      if pa.isnull(row["NAME"]):
        Workexp3_DF.loc[idx,"NAME"]=First_Name+" "+Last_Name
        Workexp3_DF.loc[idx,"CORPORATION_NAME"]=Workexp3_Corp_Name
        Workexp3_DF.loc[idx,"DESIGNATION"]=Workexp3_Designation
        Workexp3_DF.loc[idx,"FROM_YEAR"]= Workexp3_Year_From
        Workexp3_DF.loc[idx,"TO_YEAR"]=Workexp3_Year_To
        Workexp3_DF.loc[idx,"SIGNIFICANT_CONTRIBUTION"]=Workexp3_Significant
        break

#Printing All the Segregated-Datasets after Updating the Values from Raw_Data Data-Set
display(Personal_Details_DF.head(),Skills_DF.head(),Projects_DF.head(),Education1_DF.head(),Education2_DF.head(),Education3_DF.head(),Workexp1_DF.head(),Workexp2_DF.head(),Workexp3_DF.head())

#Re-Uploading or Updating The Segregated Data-Sets on Drive
Personal_Details_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Personal_Details.xlsx",index=None)
Skills_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/SKILLS.xlsx",index=None)
Projects_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Projects.xlsx",index=None)
Education1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education1.xlsx",index=None)
Education2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education2.xlsx",index=None)
Education3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education3.xlsx",index=None)
Workexp1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp1.xlsx",index=None)
Workexp2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp2.xlsx",index=None)
Workexp3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp3.xlsx",index=None)

#Clearing The RAW_DATA Data-Set Sheet and Re-Uploading its Columns
all_values = ws.get_all_values()
column_names = all_values[0]
ws.clear()
ws.insert_row(column_names, 1)
Data_DF1=get_as_dataframe(ws)
Data_DF1

#Working Google Gemini
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#Applying Google-Gemini API key and Connecting to Gemini

GOOGLE_API_KEY=userdata.get('API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

#Resolvig Latest Versions of Google-Gemini
for m in genai.list_models():
  if 'generateContent' in m.supported_generation_methods:
    print(m.name)

#Creating Google-Gemini's Model named "Gemini"
Gemini = genai.GenerativeModel('gemini-pro')

#Creating DataFrames of Segregated DataSets

#Creating Data_Frame for Personal_Details
Personal_Details_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Personal_Details.xlsx")
Personal_Details_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv",index=None)
Personal_Details_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv")
Personal_Details_DF=Personal_Details_DF.fillna("")

#Creating Data_Frame for Skills
Skills_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/SKILLS.xlsx")
Skills_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/SKILLS.csv",index=None)
Skills_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/SKILLS.csv")
Skills_DF=Skills_DF.fillna("")


#Creating Data_Frame for Projects
Projects_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Projects.xlsx")
Projects_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Projects.csv",index=None)
Projects_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Projects.csv")
Projects_DF=Projects_DF.fillna("")


#Creating Data_Frame for Education-1
Education1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education1.xlsx")
Education1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education1.csv",index=None)
Education1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education1.csv")
Education1_DF=Education1_DF.fillna("")


#Creating Data_Frame for Education-2
Education2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education2.xlsx")
Education2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education2.csv",index=None)
Education2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education2.csv")
Education2_DF=Education2_DF.fillna("")


#Creating Data_Frame for Education-1
Education3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education3.xlsx")
Education3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education3.csv",index=None)
Education3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Education3.csv")
Education3_DF=Education3_DF.fillna("")


#Creating Data_Frame for Workexp1
Workexp1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp1.xlsx")
Workexp1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp1.csv",index=None)
Workexp1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp1.csv")
Workexp1_DF=Workexp1_DF.fillna("")



#Creating Data_Frame for Workexp2
Workexp2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp2.xlsx")
Workexp2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp2.csv",index=None)
Workexp2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp2.csv")
Workexp2_DF=Workexp2_DF.fillna("")


#Creating Data_Frame for Workexp3
Workexp3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp3.xlsx")
Workexp3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp3.csv",index=None)
Workexp3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/CSV_DUPLICATES/Workexp3.csv")
Workexp3_DF=Workexp3_DF.fillna("")

#Printing All the Segregated-Datasets after Updating the Values from Raw_Data Data-Set
display(Personal_Details_DF.head(),Skills_DF.head(),Projects_DF.head(),Education1_DF.head(),Education2_DF.head(),Education3_DF.head(),Workexp1_DF.head(),Workexp2_DF.head(),Workexp3_DF.head())

#Creating DataFrames of Segregated DataSets for Completion side

#Creating Data_Frame for Personal_Details
CPersonal_Details_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Personal_Details.xlsx")
CPersonal_Details_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv",index=None)
CPersonal_Details_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Personal_Details.csv")

#Creating Data_Frame for Skills
CSkills_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/SKILLS.xlsx")
CSkills_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/SKILLS.csv",index=None)
CSkills_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/SKILLS.csv")

#Creating Data_Frame for Projects
CProjects_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Projects.xlsx")
CProjects_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Projects.csv",index=None)
CProjects_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Projects.csv")

#Creating Data_Frame for Education-1
CEducation1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education1.xlsx")
CEducation1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education1.csv",index=None)
CEducation1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education1.csv")

#Creating Data_Frame for Education-2
CEducation2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education2.xlsx")
CEducation2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education2.csv",index=None)
CEducation2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education2.csv")

#Creating Data_Frame for Education-1
CEducation3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education3.xlsx")
CEducation3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education3.csv",index=None)
CEducation3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Education3.csv")

#Creating Data_Frame for Workexp1
CWorkexp1_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp1.xlsx")
CWorkexp1_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp1.csv",index=None)
CWorkexp1_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp1.csv")


#Creating Data_Frame for Workexp2
CWorkexp2_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp2.xlsx")
CWorkexp2_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp2.csv",index=None)
CWorkexp2_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp2.csv")

#Creating Data_Frame for Workexp3
CWorkexp3_DF=pa.read_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp3.xlsx")
CWorkexp3_DF.to_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp3.csv",index=None)
CWorkexp3_DF=pa.read_csv("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/CSV_DUPLICATES/Workexp3.csv")

# Commented out IPython magic to ensure Python compatibility.
#Retrieveing Variables from Above Read Data-Sets to generate Folder for Users
emp_lst=[]#Creating this to add all the rows i have surfed to get details in order to delete them after.
for i, row in Personal_Details_DF.iterrows():
      print(i)
      if (row["FIRST_NAME"])=="":
        print("Main Iteration Is Stopping as No More Entries are Present")
        break
      else:
        APP_ID=Personal_Details_DF.loc[i,"UNIQUE_ID"]
        Template_ID=Personal_Details_DF.loc[i,"SELECTED_IMAGE"]
        Address,Name,Father_Name,Mother_Name,Languages,Hobbies,Occupation=Personal_Details_DF.loc[i,"ADDRESS"],f'''{Personal_Details_DF.loc[i,"FIRST_NAME"]} {Personal_Details_DF.loc[i,"LAST_NAME"]}''',Personal_Details_DF.loc[i,"FATHER_NAME"],Personal_Details_DF.loc[i,"MOTHER_NAME"],Personal_Details_DF.loc[i,"LANGUAGES"],Personal_Details_DF.loc[i,"HOBBIES"],Personal_Details_DF.loc[i,"OCCUPATION"]
        First_Name=Personal_Details_DF.loc[i,"FIRST_NAME"]
        Last_Name=Personal_Details_DF.loc[i,"LAST_NAME"]
        Phone_Number=f'''+{int(Personal_Details_DF.loc[i,"COUNTRY_CODE"])}-{int(Personal_Details_DF.loc[i,"PHONE"])}'''
        Skillsz=f'''{Skills_DF.loc[i,"SKILL1"]},{Skills_DF.loc[i,"SKILL2"]},{Skills_DF.loc[i,"SKILL3"]},{Skills_DF.loc[i,"SKILL4"]},{Skills_DF.loc[i,"SKILL5"]}'''
        College,Course=Education3_DF.loc[i,"INSTITUTE_NAME"],Education3_DF.loc[i,"COURSE"]
        Skill1,Skill2,Skill3,Skill4,Skill5=Skills_DF.loc[i,"SKILL1"],Skills_DF.loc[i,"SKILL2"],Skills_DF.loc[i,"SKILL3"],Skills_DF.loc[i,"SKILL4"],Skills_DF.loc[i,"SKILL5"]
        DOB,Gender,Phone,Email,Profession=Personal_Details_DF.loc[i,"DOB"],Personal_Details_DF.loc[i,"GENDER"],int(Personal_Details_DF.loc[i,"PHONE"]),Personal_Details_DF.loc[i,"EMAIL"],Personal_Details_DF.loc[i,"PROFESSION"]
        Twitter,Instagram,GitHub,LinkedIn,Facebook=Personal_Details_DF.loc[i,"TWITTER"],Personal_Details_DF.loc[i,"INSTAGRAM"],Personal_Details_DF.loc[i,"GITHUB"],Personal_Details_DF.loc[i,"LINKEDIN"],Personal_Details_DF.loc[i,"FACEBOOK"]
        Project1,Project2,Project3=Projects_DF.loc[i,"PROJECT_1"],Projects_DF.loc[i,"PROJECT_2"],Projects_DF.loc[i,"PROJECT_3"]
        Education1_Institution_Name,Education1_Institution_Address,Education1_Year_From,Education1_Year_To,Education1_CGPA=Education1_DF.loc[i,"INSTITUTE_NAME"],Education1_DF.loc[i,"INSTITUTE_ADDRESS"],int(Education1_DF.loc[i,"FROM_YEAR"]),int(Education1_DF.loc[i,"TO_YEAR"]),Education1_DF.loc[i,"CGPA"]
        Education2_Course,Education2_Institution_Name,Education2_Institution_Address,Education2_Year_From,Education2_Year_To,Education2_CGPA=Education2_DF.loc[i,"COURSE"],Education2_DF.loc[i,"INSTITUTE_NAME"],Education2_DF.loc[i,"INSTITUTE_ADDRESS"],int(Education2_DF.loc[i,"FROM_YEAR"]),int(Education2_DF.loc[i,"TO_YEAR"]),Education2_DF.loc[i,"CGPA"]
        Education3_Course,Education3_Institution_Name,Education3_Institution_Address,Education3_Year_From,Education3_Year_To,Education3_CGPA=Education3_DF.loc[i,"COURSE"],Education3_DF.loc[i,"INSTITUTE_NAME"],Education3_DF.loc[i,"INSTITUTE_ADDRESS"],int(Education3_DF.loc[i,"FROM_YEAR"]),int(Education3_DF.loc[i,"TO_YEAR"]),Education3_DF.loc[i,"CGPA"]
        Workexp1_Designation,Workexp1_Corp_Name,Workexp1_Year_From,Workexp1_Year_To,Workexp1_Significant=Workexp1_DF.loc[i,"DESIGNATION"],Workexp1_DF.loc[i,"CORPORATION_NAME"],(Workexp1_DF.loc[i,"FROM_YEAR"]),(Workexp1_DF.loc[i,"TO_YEAR"]),Workexp1_DF.loc[i,"SIGNIFICANT_CONTRIBUTION"]
        Workexp2_Designation,Workexp2_Corp_Name,Workexp2_Year_From,Workexp2_Year_To,Workexp2_Significant=Workexp2_DF.loc[i,"DESIGNATION"],Workexp2_DF.loc[i,"CORPORATION_NAME"],(Workexp2_DF.loc[i,"FROM_YEAR"]),(Workexp2_DF.loc[i,"TO_YEAR"]),Workexp2_DF.loc[i,"SIGNIFICANT_CONTRIBUTION"]
        Workexp3_Designation,Workexp3_Corp_Name,Workexp3_Year_From,Workexp3_Year_To,Workexp3_Significant=Workexp3_DF.loc[i,"DESIGNATION"],Workexp3_DF.loc[i,"CORPORATION_NAME"],(Workexp3_DF.loc[i,"FROM_YEAR"]),(Workexp3_DF.loc[i,"TO_YEAR"]),Workexp3_DF.loc[i,"SIGNIFICANT_CONTRIBUTION"]
        emp_lst.append(APP_ID)



        if int(Template_ID)==1210:
          print("Using Template 1")
          # Creation of A Folder with APP_ID for each Separately in Drive
          App_ID = APP_ID
          Address1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}"
          os.makedirs(Address1, exist_ok=True)


          # Copying the Static files ie assets and styles to respective folders of Users

          source_path1 = "/content/drive/My Drive/ApnaWEB/Users/Default/Static_Mini_Project/assets"
          source_path2 = "/content/drive/My Drive/ApnaWEB/Users/Default/Static_Mini_Project/styles"

          destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
          destination_path2 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/styles/"

          #Copy Command
          !cp -av "$source_path1" "$destination_path1"
          !cp -av "$source_path2" "$destination_path2"

          #Generating Bio using Google-Gemini

          response = None

          while response is None:
              try:
                  response = Gemini.generate_content(f''' Hello! I'm Mokshith Balidi, currently based in the vibrant city of Hyderabad, Telangana, India. I'm a passionate
                  student pursuing a Bachelor's degree in Information Technology at CBIT college in Gandipet, Hyderabad. In the realm of technology, my focus lies in
                    Frontend Frameworks, Logic Building, and Data Structures. I thrive on the challenges of coding and enjoy bringing creative solutions to life. My
                    academic journey at CBIT has equipped me with a strong foundation in these areas. I've had the opportunity to translate my skills into real-world
                      projects, where I've crafted websites using technologies like React, HTML, and CSS. These experiences have honed my abilities and sparked my interest
                      in the intricate world of data structures and operating systems. Beyond the code, I embrace a "live life king-size" philosophy. When I'm not immersed
                        in coding, you'll find me on the badminton court, exploring the depths of the internet, or indulging in my favorite pastime—streaming content on Netflix
                        and various OTT platforms. I'm enthusiastic about the journey ahead, driven by a genuine love for coding and a commitment to delivering exceptional frontend experiences.
                        Let's connect and explore the possibilities together.
                        Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for person named "{Name}" whose Gender is "{Gender}" who pursued {Course} in the college "{College}",excelled skills in {Skillsz} and her hobbies {Hobbies}.
                        Who completed their Mtriculation during the years {Education1_Year_From} to {Education1_Year_To} with CGPA {Education1_CGPA}. and
                  Their High School During Years  {Education1_Year_From} to {Education2_Year_To} with CGPA {Education2_CGPA} in an Institute named {Education2_Institution_Name} located
                    in {Education2_Institution_Address} pursuing course {Education2_Course}.  in 250 Words. Emebedd A new Tagline Defining Them. Start the Bio with "Hello!". ''')
                  Text = response.text
                  Bio=Text.replace("*","")
                  Bio=Bio.title()
              except Exception as e:
                  print(f"An error occurred: {e}")

          #Creation of HTML File for The So on and So Forth user up until Home-Page
          Home_HTML=f'''<!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <script src="https://unpkg.com/typed.js@2.0.16/dist/typed.umd.js"></script>
              <link rel="shortcut icon" type="x-icon" href="assets\\hover.svg" />
              <script
                type="module"
                src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"
              ></script>
              <script
                nomodule
                src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"
              ></script>
              <link rel="stylesheet" href="./styles/main.css" />
              <title>{Name}'s Portfolio</title>
            </head>
            <body>
              <!-------- NAVBAR --------->
              <header>
                <nav role="navigation" aria-label="Navigation">
                  <div class="container navbar">
                    <h1>{Name.title()}</h1>

                    <ul class="nav-menu">
                      <li><a href="#home">Home</a></li>
                      <li><a href="#about">About</a></li>
                      <!--<li><a href="#resume">Resume</a></li>-->
                      {'<li><a href="#projects">Projects</a></li>' if Project1 !="" or Project2 !="" or Project3 != "" else "" }
                      <li><a href="#contact">Contact</a></li>
                    </ul>

                    <button aria-label="Toggle Mobile Menu" class="hamburger">
                      <span class="bar"></span>
                      <span class="bar"></span>
                      <span class="bar"></span>
                    </button>
                  </div>
                </nav>
              </header>\n'''

          #Dynamic and Versatile,HTML Code of Social-Links Page

          social_links = []
          if Twitter != "":
              social_links.append(f'''
              <a href="{Twitter}" aria-label="Twitter Link" target="_blank">
                  <ion-icon name="logo-twitter"></ion-icon>
              </a>
              ''')
          if Instagram != "":
              social_links.append(f'''
              <a href="{Instagram}" aria-label="Instagram Link" target="_blank">
                  <ion-icon name="logo-instagram"></ion-icon>
              </a>
              ''')
          if LinkedIn != "":
              social_links.append(f'''
              <a href="{LinkedIn}" aria-label="LinkedIn Link" target="_blank">
                  <ion-icon name="logo-linkedin"></ion-icon>
              </a>
              ''')
          if GitHub != "":
              social_links.append(f'''
              <a href="{GitHub}" aria-label="GitHub Link" target="_blank">
                  <ion-icon name="logo-github"></ion-icon>
              </a>
              ''')
          if Facebook != "":
              social_links.append(f'''
              <a href="{Facebook}" aria-label="Facebook Link" target="_blank">
                  <ion-icon name="logo-facebook"></ion-icon>
              </a>
              ''')
          #Joining all The Social-Links ie anchor-tags that are availabe Together
          social_links = "\n".join(social_links)

          # Create the main HTML content

          Social_Links_HTML = f'''
          <main>
              <!-- HERO SECTION -->
              <section id="home" class="hero">
                  <div class="hero-overlay"></div>
                  <div class="container hero-content">
                      <div class="hero-text">
                          <h2 id="typed-text"></h2>
                      </div>
                      <div class="hero-socials" aria-label="Social Media Links">
                          {social_links}
                      </div>
                  </div>
              </section>
          </main>\n
          '''

          #Complete Home-Page Up Until Social-Links

          Complete_Home_HTML=''''''
          Complete_Home_HTML=Home_HTML+Social_Links_HTML

          #Creation of HTML CODE FOR Bio of the User

          Bio_HTML=f'''<!--ABOUT SECTION-->
                <section class="about" id="about">
                  <div class="container">
                    <h1>
                      I'm<br />
                      <strong>{Name},</strong> <br />I'm a
                      <strong>{Profession} </strong>&
                      <strong>{Occupation}</strong>
                    </h1>

                    <div class="about-info">
                      <p>
                        {Bio}
                      </p>
                    </div>
                  <a href="assets\\{APP_ID}_Resume.pdf" target="_blank">
                      <button class="about-button" aria-label="Download Resume Button">
                        Download Resume
                        <ion-icon name="download-outline" aria-hidden="true"></ion-icon>
                      </button>
                    </a>
                  </div>
                </section>'''

          #Completing the HTML Code Up until Bio Page or Known as About Page
          Complete_Home_HTML=''''''
          Complete_Home_HTML=Home_HTML+Social_Links_HTML+Bio_HTML


          #Skills Section


          #Dynamic and Versatile,HTML Code of Skills Page


          Total_Skills = []
          #Images Cordination Code for Logo Display
          Imgs=[]
          folder_path = '/content/drive/MyDrive/ApnaWEB/Skills_Logos'

          # Get the list of files in the folder
          files = os.listdir(folder_path)

          # Print the names of all files in the folder
          for file in files:
              Imgs.append(file.replace(".png",""))



          #Skill-1 Beginning


          if Skill1 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''I Excelled in Leveraging React, a declarative JavaScript library,
                          to craft Efficient, Modular, and Reusable user interfaces during
                          my projects. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Skill1} in strictly 20 words.''')
                Text=response1.text
                Skill1_Response=Text.replace("*","")
                Skill1_Response=Skill1_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")


            #Image Cordination
            Skillsz1=Skill1
            Skillsz1=Skillsz1.lower().replace(" ","_")
            Imgs_Final1=[]
            pattern1 = r"\b{}\b".format(re.escape(Skillsz1))

            #Loop to Find Respective Image in the file
            for ele in Imgs:
              text = ele
              if re.search(pattern1, text):
                  Imgs_Final1.append(ele)
                  break
              else:
                pass

            #If Image is  Found we will Use Image For representation else we will Just Put the Label of Skill
            if len(Imgs_Final1)!=0:
              Total_Skills.append(f'''
              <div class="skill">
                      <img src="./assets/{Imgs_Final1[0]}.png" width="45%">
                      <h3 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill1}</h3>
                      <p>
                        {Skill1_Response}
                      </p>
                    </div>
              ''')
              source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
              destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
              !cp -av "$source_path1" "$destination_path1"

            else:
              Total_Skills.append(f'''
              <div class="skill">
                      <h1 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill1}</h1>
                      <p>
                        {Skill1_Response}
                      </p>
                    </div>
              ''')

          #Skill-1 Completed



          #Skill-2 Beginning

          if Skill2 != "":
            response2=None
            while response2 is None:
              try:
                response2 = Gemini.generate_content(f'''I Excelled in Leveraging React, a declarative JavaScript library,
                          to craft Efficient, Modular, and Reusable user interfaces during
                          my projects. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Skill2} in strictly 20 words.''')
                Text=response2.text
                Skill2_Response=Text.replace("*","")
                Skill2_Response=Skill2_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

            #Image Cordination
            Skillsz2=Skill2
            Skillsz2=Skillsz2.lower().replace(" ","_")
            Imgs_Final2=[]
            pattern2 = r"\b{}\b".format(re.escape(Skillsz2))

            #Loop to Find Respective Image in the file
            for ele in Imgs:
              text = ele
              if re.search(pattern2, text):
                  Imgs_Final2.append(ele)
                  break
              else:
                pass

            #If Image is  Found we will Use Image For representation else we will Just Put the Label of Skill
            if len(Imgs_Final2)!=0:
              Total_Skills.append(f'''
              <div class="skill">
                      <img src="./assets/{Imgs_Final2[0]}.png" width="45%">
                      <h3 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill2}</h3>
                      <p>
                        {Skill2_Response}
                      </p>
                    </div>
              ''')
              source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final2[0]}.png"
              destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
              !cp -av "$source_path1" "$destination_path1"
            else:
              Total_Skills.append(f'''
              <div class="skill">
                      <h1 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill2}</h1>
                      <p>
                        {Skill2_Response}
                      </p>
                    </div>
              ''')

          #Skill-2 Completed




          #Skill-3 Beginning

          if Skill3 != "":
            response3=None
            while response3 is None:
              try:
                response3 = Gemini.generate_content(f'''I Excelled in Leveraging React, a declarative JavaScript library,
                          to craft Efficient, Modular, and Reusable user interfaces during
                          my projects. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Skill3} in strictly 20 words.''')
                Text=response3.text
                Skill3_Response=Text.replace("*","")
                Skill3_Response=Skill3_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

            #Image Cordination
            Skillsz3=Skill3
            Skillsz3=Skillsz3.lower().replace(" ","_")
            Imgs_Final3=[]
            pattern3 = r"\b{}\b".format(re.escape(Skillsz3))

            #Loop to Find Respective Image in the file
            for ele in Imgs:
              text = ele
              if re.search(pattern3, text):
                  Imgs_Final3.append(ele)
                  break
              else:
                pass

            #If Image is  Found we will Use Image For representation else we will Just Put the Label of Skill
            if len(Imgs_Final3)!=0:
              Total_Skills.append(f'''
              <div class="skill">
                      <img src="./assets/{Imgs_Final3[0]}.png" width="45%">
                      <h3 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill3}</h3>
                      <p>
                        {Skill3_Response}
                      </p>
                    </div>
              ''')
              source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final3[0]}.png"
              destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
              !cp -av "$source_path1" "$destination_path1"
            else:
              Total_Skills.append(f'''
              <div class="skill">
                      <h1 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill3}</h1>
                      <p>
                        {Skill3_Response}
                      </p>
                    </div>
              ''')

          #Skill-3 Completed



          #Skill-4 Beginning

          if Skill4 != "":
            response4=None
            while response4 is None:
              try:
                response4 = Gemini.generate_content(f'''I Excelled in Leveraging React, a declarative JavaScript library,
                          to craft Efficient, Modular, and Reusable user interfaces during
                          my projects. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Skill4} in strictly 20 words.''')
                Text=response4.text
                Skill4_Response=Text.replace("*","")
                Skill4_Response=Skill4_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

            #Image Cordination
            Skillsz4=Skill4
            Skillsz4=Skillsz4.lower().replace(" ","_")
            Imgs_Final4=[]
            pattern4 = r"\b{}\b".format(re.escape(Skillsz4))

            #Loop to Find Respective Image in the file
            for ele in Imgs:
              text = ele
              if re.search(pattern4, text):
                  Imgs_Final4.append(ele)
                  break
              else:
                pass

            #If Image is  Found we will Use Image For representation else we will Just Put the Label of Skill
            if len(Imgs_Final4)!=0:
              Total_Skills.append(f'''
              <div class="skill">
                      <img src="./assets/{Imgs_Final4[0]}.png" width="45%">
                      <h3 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill4}</h3>
                      <p>
                        {Skill4_Response}
                      </p>
                    </div>
              ''')
              source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final4[0]}.png"
              destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
              !cp -av "$source_path1" "$destination_path1"
            else:
              Total_Skills.append(f'''
              <div class="skill">
                      <h1 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill4}</h1>
                      <p>
                        {Skill4_Response}
                      </p>
                    </div>
              ''')

          #Skill-4 Completed



          #Skill-5 Beginning

          if Skill5 != "":
            response5=None
            while response5 is None:
              try:
                response5 = Gemini.generate_content(f'''I Excelled in Leveraging React, a declarative JavaScript library,
                          to craft Efficient, Modular, and Reusable user interfaces during
                          my projects. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Skill5} in strictly 20 words.''')
                Text=response5.text
                Skill5_Response=Text.replace("*","")
                Skill5_Response=Skill5_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

            #Image Cordination
            Skillsz5=Skill5
            Skillsz5=Skillsz5.lower().replace(" ","_")
            Imgs_Final5=[]
            pattern5 = r"\b{}\b".format(re.escape(Skillsz5))

            #Loop to Find Respective Image in the file
            for ele in Imgs:
              text = ele
              if re.search(pattern5, text):
                  Imgs_Final5.append(ele)
                  break
              else:
                pass

            #If Image is  Found we will Use Image For representation else we will Just Put the Label of Skill
            if len(Imgs_Final5)!=0:
              Total_Skills.append(f'''
              <div class="skill">
                      <img src="./assets/{Imgs_Final5[0]}.png" width="45%">
                      <h3 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill5}</h3>
                      <p>
                        {Skill5_Response}
                      </p>
                    </div>
              ''')
              source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final5[0]}.png"
              destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
              !cp -av "$source_path1" "$destination_path1"
            else:
              Total_Skills.append(f'''
              <div class="skill">
                      <h1 style="font-weight:bold; font-family: 'Times New Roman', Times, serif;">{Skill5}</h1>
                      <p>
                        {Skill5_Response}
                      </p>
                    </div>
              ''')

          #Skill-5 Completed





          #Joining all The Social-Links ie anchor-tags that are availabe Together
          if len(Total_Skills)!=0:
            Skills = "\n".join(Total_Skills)
            Skills_HTML = f'''
            <!--SKILLS SECTION-->
                  <section class="skills" id="skills">
                    <h1>Just a few of my <strong>skills</strong></h1>
                    <div class="container skill-grid">
                    {Skills}

                    </div>
                  </section>\n
            '''
          else:
            Skills_HTML='''\n'''


          #Appending the Final HTML with Skills Section

          Complete_Home_HTML=''''''
          Complete_Home_HTML=(Home_HTML)+(Social_Links_HTML)+(Bio_HTML)+(Skills_HTML)





          #Education HTML Code
          response6,response7,response8=None,None,None
          while response6 is None:
            try:
              response6=Gemini.generate_content(f'''Excelled in Information Technology studies, mastering database
                                management, network security, software development, systems
                                analysis, and cybersecurity fundamentals. Proven ability in IT
                                project management, showcasing a commitment to excellence and
                                readiness for real-world challenges.Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Name} who is studying {Education3_Course} in {Education3_Institution_Name} {Education3_Institution_Address} from year {(Education3_Year_From)} to{(Education3_Year_To)} in 30 words.Use I dont use name''')
              Text=response6.text
              Education3=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")

          while response7 is None:
            try:
              response7=Gemini.generate_content(f'''Intermediate (10+1 & 10+2) Narayana Jr. College, Jubilee
                                Hills, Hyderabad Completed with distinction, achieving an
                                outstanding 96% overall. Excelling in diverse subjects, I
                                demonstrated a strong academic foundation and commitment to
                                excellence..Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Name} who is studying {Education2_Course} in {Education2_Institution_Name} {Education2_Institution_Address} from year {(Education2_Year_From)} to{(Education2_Year_To)} in 30 words.Use I dont use name''')
              Text=response7.text
              Education2=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")

          while response8 is None:
            try:
              response8=Gemini.generate_content(f'''Exemplary performance in high school with outstanding results,
                                highlighting my dedication to academic excellence.
                                Demonstrated proficiency across subjects, leadership in
                                extracurricular activities, and a commitment to personal and
                                scholastic growth..Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for {Name} who is studied High SChool 10th class in {Education1_Institution_Name} {Education3_Institution_Address} from year {(Education1_Year_From)} to{(Education1_Year_To)} in 30 words.Use I dont use name''')
              Text=response8.text
              Education1=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")


          Education_HTML_Code=f'''<section class="resume" id="resume">
                  <div class="container">
                    <h1>
                      My Previous <strong>Work</strong> History &
                      <strong>Education</strong>
                    </h1>

                    <div class="resume-content">
                      <div>
                        <h2>Education</h2>

                        <article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>Under Graduation (Equivalent)</p>
                              <p>{Education3_Institution_Name}, {Education3_Institution_Address}</p>
                            </div>
                            <span>{(Education3_Year_From)}-{(Education3_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Education3}
                          </p>
                        </article>
                        <article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>High School Education (Equivalent)</p>
                              <p>{Education2_Institution_Name}, {Education2_Institution_Address}</p>
                            </div>
                            <span>{(Education2_Year_From)}-{(Education2_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Education2}
                          </p>
                        </article>
                        <article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>Secondary School (Equivalent)</p>
                              <p>{Education1_Institution_Name}, {Education1_Institution_Address}</p>
                            </div>
                            <span>{(Education1_Year_From)}-{(Education1_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Education1}
                          </p>
                        </article>
                        </div>\n'''

          #Joining Code For Final_one

          Complete_Home_HTML=''''''
          Complete_Home_HTML=(Home_HTML)+(Social_Links_HTML)+(Bio_HTML)+(Skills_HTML)+(Education_HTML_Code)

          #WorkExp HTML Dynamic Code Generation

          response9,response10,response11=None,None,None
          Workexp_Code=[]

          if Workexp3_Designation != "":
            while response9 is None:
              try:
                response9=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for someone named {Name} holding the designation {Workexp3_Designation},in the corporation {Workexp3_Corp_Name} from year {int(Workexp3_Year_From)} to year {int(Workexp3_Year_To)} in 30 words''')
                Text=response9.text
                Workexp3=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''<article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>{Workexp3_Designation}</p>
                              <p>{Workexp3_Corp_Name}</p>
                            </div>
                            <span>{int(Workexp3_Year_From)}-{int(Workexp3_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Workexp3}
                          </p>
                        </article>''')

          if Workexp2_Designation != "":
            while response10 is None:
              try:
                response10=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for someone named {Name} holding the designation {Workexp2_Designation},in the corporation {Workexp2_Corp_Name} from year {int(Workexp2_Year_From)} to year {int(Workexp2_Year_To)} in 30 words''')
                Text=response10.text
                Workexp2=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''<article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>{Workexp2_Designation}</p>
                              <p>{Workexp2_Corp_Name}</p>
                            </div>
                            <span>{int(Workexp2_Year_From)}-{int(Workexp2_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Workexp2}
                          </p>
                        </article>''')

          if Workexp1_Designation != "":
            while response11 is None:
              try:
                response11=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE for someone named {Name} holding the designation {Workexp1_Designation},in the corporation {Workexp1_Corp_Name} from year {int(Workexp1_Year_From)} to year {int(Workexp1_Year_To)} in 30 words''')
                Text=response11.text
                Workexp1=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''<article>
                          <div class="card-header">
                            <div class="card-header-info">
                              <p>{Workexp1_Designation}</p>
                              <p>{Workexp1_Corp_Name}</p>
                            </div>
                            <span>{int(Workexp1_Year_From)}-{int(Workexp1_Year_To)}</span>
                          </div>
                          <p class="card-info">
                            {Workexp1}
                          </p>
                        </article>''')

          if len(Workexp_Code)!=0:
            Work_Experience_Finals="\n".join(Workexp_Code)
            Workexp_HTML_Code=f'''<div>
                          <h2>Experience</h2>
                          {Work_Experience_Finals}

                        </div>
                      </div>
                    </div>
                  </section>\n
            '''
          else:
            Workexp_HTML_Code='''</div>
                  </div>
                </section>\n'''

          #Joining Code For Final_one
          Complete_Home_HTML=''''''
          Complete_Home_HTML=(Home_HTML)+(Social_Links_HTML)+(Bio_HTML)+(Skills_HTML)+(Education_HTML_Code)+(Workexp_HTML_Code)

          #Projects Dynamic and Responsive Section HTML Code

          Projects=[]


          if Project1 != "":
            print("Under Template-1 Project1")
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project1_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(f'^{re.escape(Profile_filename)}\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project1ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project1ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
                !cp -av "$source_path1" "$destination_path1"

            Projects.append(f'''<div class="project-card">
                        <h2>{Project1}</h2>
                        <br />
                        <img src="./assets/{Project1ss}" alt="Project" />
                      </div>''')


          if Project2 != "":
            print("Under Template-1 Project2")
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project2_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(f'^{re.escape(Profile_filename)}\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project2ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project2ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
                !cp -av "$source_path1" "$destination_path1"

            Projects.append(f'''<div class="project-card">
                        <h2>{Project2}</h2>
                        <img src="./assets/{Project2ss}" alt="Project" />
                      </div>''')


          if Project3 != "":
            print("Under Template-1 Project3")
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project3_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(f'^{re.escape(Profile_filename)}\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project3ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project3ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/"
                !cp -av "$source_path1" "$destination_path1"

            Projects.append(f'''<div class="project-card">
                        <h2>{Project3}</h2>
                        <br />
                        <img src="./assets/{Project3ss}" alt="Project" />
                      </div>''')

          if len(Projects)!=0:
            Projects="\n".join(Projects)
            Projects_HTML_Code = f'''
            <!--PROJECTS SECTION -->
                  <section class="projects" id="projects">
                    <div class="container">
                      <h1>Some of My <strong>Projects</strong></h1>

                      <div class="project-grid">
                        {Projects}
                      </div>
                    </div>
                  </section>\n
            '''
          else:
            Projects_HTML_Code='''\n'''

          #Joining Project_HTML_Code For Final_one
          Complete_Home_HTML=''''''
          Complete_Home_HTML=(Home_HTML)+(Social_Links_HTML)+(Bio_HTML)+(Skills_HTML)+(Education_HTML_Code)+(Workexp_HTML_Code)+(Projects_HTML_Code)

          #Creating Conact Us Page

          Contactus_HTML_Code=f'''<!--CONTACT SECTION-->

                <section class="contact" id="contact">
                  <div class="container">
                    <h1>Let's <strong>Talk</strong></h1>
                    <p>
                      Thank you for your message! I am dedicated to addressing your
                      inquiry personally. Kindly allow 24-48 hours for my response. Your
                      understanding is greatly appreciated.
                    </p>
                    <div>
                      <form
                        id="contact-form"
                        aria-label="Contact Form"
                        action="https://api.web3forms.com/submit"
                        method="POST"
                      >
                        <input
                          type="hidden"
                          name="access_key"
                          value=""
                        />
                        <div class="form-row">
                          <input
                            type="text"
                            name="name"
                            class="form-input"
                            placeholder="Your Name"
                            required
                            aria-label="Your name"
                            autocomplete="off"
                          />
                          <input
                            type="email"
                            name="email"
                            id="emailsss"
                            class="form-input"
                            placeholder="Your email"
                            required
                            aria-label="Your email"
                            autocomplete="off"
                          />
                        </div>

                        <textarea
                          rows="6"
                          name="message"
                          class="form-input"
                          placeholder="Enter your message here..."
                          required
                          style="resize: none"
                          aria-label="Your Message"
                          autocomplete="off"
                        ></textarea>

                        <div class="form-button">
                          <button type="submit">Submit Your Message</button>
                        </div>
                      </form>
                    </div>
                  </div>
                </section>
              </main>
              <footer>
                <div class="container footer-container">
                  <p>&copy; 2024 Codes&Bytes | All rights reserved</p>
                </div>
              </footer>
              <script src="./app.js"></script>
            </body>
          </html>

          <!--
          Subject: Congratulations on Your New Website!


          Dear {Name},

  Congratulations on having your own website through ApnaWeb! We are thrilled to see your online presence come to life. Your website, https://codes-bytes.github.io/{APP_ID}/, is a fantastic achievement that showcases your unique identity and offerings to the world.

  Your Portfolio's Link is : https://codes-bytes.github.io/{APP_ID}/

  Having a personal website opens up a world of opportunities for you to connect, share, and grow. Whether you're showcasing your work, sharing your thoughts, or building your brand, your website is the perfect platform to express yourself and reach a wider audience.

  If you have any queries or need assistance with your website, feel free to contact me directly at codesandbytes@gmail.com. I am here to help you make the most of your online presence.

  We wish you all the success with your new website and look forward to seeing how it evolves and grows over time. Congratulations once again, and best wishes for your online journey ahead!

  Warm regards,

  MOKSHITH BALIDI (CEO, FOUNDER CODES & BYTES)
  ApnaWeb -->

  <!--users mail is : {Email}-->

          '''

          #Joining Contact_us Code For Final_one

          Complete_Home_HTML=''''''
          Complete_Home_HTML=(Home_HTML)+(Social_Links_HTML)+(Bio_HTML)+(Skills_HTML)+(Education_HTML_Code)+(Workexp_HTML_Code)+(Projects_HTML_Code)+(Contactus_HTML_Code)

          #JAVA-SCRIPT Creation
          Java_Script_Part1='''//NAVBAR
          const hamburger = document.querySelector(".hamburger");
          const navMenu = document.querySelector(".nav-menu");
          const body = document.querySelector("body");
          const navLinks = navMenu.querySelectorAll("li");
          const nav = document.querySelector("nav");

          hamburger.addEventListener("click", () => {
            hamburger.classList.toggle("active");
            navMenu.classList.toggle("active");
            body.classList.toggle("no-scroll");
          });

          function closeMenu() {
            hamburger.classList.remove("active");
            navMenu.classList.remove("active");
            body.classList.remove("no-scroll");
          }

          navLinks.forEach((link) => {
            link.addEventListener("click", closeMenu);
          });

          function handleScroll() {
            if (window.scrollY > 150) {
              nav.classList.add("sticky-nav");
            } else {
              nav.classList.remove("sticky-nav");
            }
          }
          window.addEventListener("scroll", handleScroll);

          //TYPING DELETING TEXT
          function initTypedText() {
            const options = { \n
            '''

          Java_Script_Part2=f'''strings: [
                "Hello, I'm {Name.title()}",
                "{Occupation.title()}",
                "From {Address.title()}",
              ],
              typeSpeed: 70,
              backSpeed: 50,
              backDelay: 1000,
              startDelay: 500,
              loop: true, \n'''

          Java_Script_Part3='''};
            const typed = new Typed("#typed-text", options);
          }

          initTypedText();'''

          Java_Script_Final=Java_Script_Part1+Java_Script_Part2+Java_Script_Part3



          #Opeining and Pasting the Final_HTML to the file in Drive

          with open(f'{Address1}/index.txt', 'w') as f:
            f.write(f'{Complete_Home_HTML}')

          #Opeining and Pasting the Final_JavaScript to the file in Drive

          with open(f'{Address1}/app.txt', 'w') as f:
            f.write(f'{Java_Script_Final}')

          #Conversion of index.txt to index.html

          import os
          thisFile = f"{Address1}/index.txt"
          base = os.path.splitext(thisFile)[0]
          os.rename(thisFile, base + ".html")

          #Conversion of app.txt to app.js

          import os
          thisFile = f"{Address1}/app.txt"
          base = os.path.splitext(thisFile)[0]
          os.rename(thisFile, base + ".js")

          #Whole  of LATEX Part

          response = None
          while response is None:
            try:
              response = Gemini.generate_content(f''' Greetings! I'm Mokshith Balidi, a student at CBIT college in Hyderabad, India, pursuing a Bachelor's in Information Technology.
                          My passion lies in Frontend Frameworks, Logic Building, and Data Structures. I've applied my skills in projects using React, HTML, and CSS, gaining valuable real-world
                          experience.
                          Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for person named "{Name}" whose Gender is "{Gender}" who pursued {Course} in the college "{College}",wiht skillset of {Skillsz} in same number of Words. ''')
              Text = response.text
              Bio1=Text.replace("*","")
              Bio1=Bio1.title()
            except Exception as e:
                          print(f"An error occurred: {e}")


          response = None
          while response is None:
            try:
              response = Gemini.generate_content(f''' These immersive experiences have sharpened my technical skills and sparked my curiosity in data structures and operating systems. Beyond coding,
              I embrace a holistic approach to life, enjoying badminton matches, exploring the internet, and indulging in Netflix binges. I'm also the CEO and Founder of Codes and Bytes, passionate about
                pushing the boundaries of frontend development. Let's connect and explore possibilities together!
                          Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for person excelled skills in {Skillsz} and her hobbies {Hobbies}.
                          in same number of Words. ''')
              Text = response.text
              Bio2=Text.replace("*","")
              Bio2=Bio2.title()
            except Exception as e:
                          print(f"An error occurred: {e}")

          while True:
              try:
                class MyName(CommandBase):
                    _latex_name = 'MyName'

                class MySlogan(CommandBase):
                    _latex_name = 'MySlogan'

                class NewPart(CommandBase):
                    _latex_name = 'NewPart'

                class PersonalEntry(CommandBase):
                    _latex_name = 'PersonalEntry'

                class SkillsEntry(CommandBase):
                    _latex_name = 'SkillsEntry'

                class EducationEntry(CommandBase):
                    _latex_name = 'EducationEntry'

                class WorkEntry(CommandBase):
                    _latex_name = 'WorkEntry'

                if __name__ == '__main__':
                    doc = Document(documentclass='scrartcl', document_options=["paper=a4", "fontsize=11pt"])

                    doc.preamble.append(Package('mdframed'))
                    doc.preamble.append(Package('babel', options="english"))
                    doc.preamble.append(Package('microtype', options="protrusion=true,expansion=true"))
                    doc.preamble.append(Package('amsmath'))
                    doc.preamble.append(Package('amsfonts'))
                    doc.preamble.append(Package('amsthm'))
                    doc.preamble.append(Package('graphicx'))
                    doc.preamble.append(Package('xcolor', options="svgnames"))
                    doc.preamble.append(Package('geometry'))
                    doc.preamble.append(Package('url'))
                    doc.preamble.append(Package('sectsty'))

                    doc.append(Command('frenchspacing'))
                    doc.append(Command('pagestyle', 'empty'))

                    doc.append(Command("textheight=700px"))

                    doc.append(Command("sectionfont", NoEscape(r""" \usefont{OT1}{phv}{b}{n} \sectionrule{0pt}{0pt}{-5pt}{3pt}}""")))

                    doc.append(Command("newlength", Command("spacebox")))
                    doc.append(Command("settowidth", [Command("spacebox"), "8888888888"]))

                    sepspace = UnsafeCommand('newcommand', r'\sepspace',
                                            extra_arguments=r"""
                                            \vspace*{1em}
                """)
                    doc.append(sepspace)

                    MyName = UnsafeCommand('newcommand', r'\MyName', options=1,
                                extra_arguments=r"""
                      \vspace*{-2cm}
                      \begin{center}
                      \Huge \usefont{OT1}{phv}{b}{n} #1
                      \par \normalsize \normalfont
                      \end{center}
          """)
                    doc.append(MyName)

                    MySlogan = UnsafeCommand('newcommand', r'\MySlogan', options=1,
                                  extra_arguments=r"""
                  \vspace*{-0.6cm}
                  \begin{center}
                  \large \usefont{OT1}{phv}{m}{n} \textit{#1}
                  \par \normalsize \normalfont
                  \end{center}
          """)
                    doc.append(MySlogan)


                    NewPart = UnsafeCommand('newcommand', r'\NewPart', options=1,
                                            extra_arguments=r"""
                                            \section*{\uppercase{#1}}
                """)
                    doc.append(NewPart)


                    ShortResume = UnsafeCommand('newcommand', r'\ShortResume', options=1,
                                  extra_arguments=r"""
                                  \vspace{0.5cm} % Adjust the space as needed
                                  \begin{center}
                                  \Large \textbf{Short Resume}
                                  \end{center}
                                  \par \normalsize \normalfont
          """)

                    doc.append(ShortResume)

                    PersonalEntry = UnsafeCommand('newcommand', r'\PersonalEntry', options=2,
                                        extra_arguments=r"""
              \noindent\begin{tabular}{@{}p{3cm}p{\dimexpr\linewidth-3cm}@{}}
                  \textbf{#1} & #2 \\
              \end{tabular}
              \vspace{0.2cm}  % Adjust the space as needed
          """)

                    doc.append(PersonalEntry)

                    SkillsEntry = UnsafeCommand('newcommand', r'\SkillsEntry', options=2,
                                      extra_arguments=r"""
                                      \noindent\hangindent=2em\hangafter=0 % Indentation
                                      \textbf{\Large #1} \par          % Entry name (bold and large)
                                      \hspace*{1.5em} #2 \par          % Entry value
          """)


                    doc.append(SkillsEntry)

                    LanguagesEntry = UnsafeCommand('newcommand', r'\LanguagesEntry', options=2,
                                      extra_arguments=r"""
                                      \noindent\hangindent=2em\hangafter=0 % Indentation
                                      \textbf{\Large #1} \par          % Entry name (bold and large)
                                      \hspace*{1.5em} #2 \par          % Entry value
          """)


                    doc.append(LanguagesEntry)

                    EducationEntry = UnsafeCommand('newcommand', r'\EducationEntry', options=5,
                                              extra_arguments=r"""
                    \noindent \textbf{#1} \hfill      % Study
                    \colorbox{Black}{%
                        \parbox{6em}{%
                        \hfill\color{White}#2}} \par  % Duration
                    \noindent \textit{#3} \par        % School
                    \noindent \textit{#4} \par        % Address
                    \noindent \small #5 \par         % Description
                    \normalsize \par
                """)
                    doc.append(EducationEntry)


                    WorkEntry = UnsafeCommand('newcommand', r'\WorkEntry', options=4,
                                              extra_arguments=r"""
#                         % Same as \EducationEntry
                        \noindent \textbf{#1} \hfill      % Jobname
                        \colorbox{Black}{\color{White}#2} \par  % Duration
                        \noindent \textit{#3} \par              % Company
                        \noindent\hangindent=2em\hangafter=0 \small #4 % Description
                        \normalsize \par
                """)
                    doc.append(WorkEntry)

                    doc.append(Command("MyName", f"{Name}"))
                    doc.append(Command('MySlogan', f"{Profession}"))

                    doc.append(Command('sepspace'))

                    doc.append(Command('NewPart', ["Personal details", NoEscape("")]))


                    doc.append(Command('PersonalEntry', [" ", " "]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Father's Name", f"{Father_Name}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Mother's Name", f"{Mother_Name}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Date Of Birth", f"{DOB}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Gender", f"{Gender}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Address", f"{Address}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Phone", f"{Phone}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Email", f"{Email}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Portfolio", f"https://codes-bytes.github.io/{APP_ID}/"]))

                    doc.append(Command('NewPart', ["Short Resume Details", NoEscape("")]))
                    doc.append(f"{Bio1} \n {Bio2}")

                    doc.append(Command('pagebreak'))


                    doc.append(Command('NewPart', ["Education details", NoEscape("")]))

                    doc.append(Command("EducationEntry", ["UNDER GRADUATION", NoEscape(f"{(Education3_Year_From)}-{(Education3_Year_To)}"), f"{Education3_Institution_Name},",f"{Education3_Institution_Address}", f"{Education3}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command("EducationEntry", ["HIGH SCHOOL | EQUIVALENT", NoEscape(f"{(Education2_Year_From)}-{(Education2_Year_To)}"), f"{Education2_Institution_Name},", f"{Education2_Institution_Address}", f"{Education2}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command("EducationEntry", ["MATRICULATION | EQUIVALENT", NoEscape(f"{(Education1_Year_From)}-{(Education1_Year_To)}"), f"{Education1_Institution_Name},",f"{Education1_Institution_Address}",f"{Education1}"]))

                    doc.append(Command('sepspace'))

                    if Workexp3_Designation != "" or Workexp2_Designation != "" or Workexp1_Designation != "":
                      doc.append(Command('NewPart', ["Work details", NoEscape("")]))

                    if Workexp3_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp3_Designation}", NoEscape(f"{int(Workexp3_Year_From)}-{int(Workexp3_Year_To)}"), f"{Workexp3_Corp_Name}", f'''{Workexp3}''']))
                      doc.append(Command('sepspace'))
                    if Workexp2_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp2_Designation}", NoEscape(f"{int(Workexp2_Year_From)}-{int(Workexp2_Year_To)}"), f"{Workexp2_Corp_Name}", f'''{Workexp2}''']))
                      doc.append(Command('sepspace'))
                    if Workexp1_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp1_Designation}", NoEscape(f"{int(Workexp1_Year_From)}-{int(Workexp1_Year_To)}"), f"{Workexp1_Corp_Name}", f'''{Workexp1}''']))
                      doc.append(Command('sepspace'))

                    doc.append(Command('NewPart', ["Skills", NoEscape("")]))
                    if "," in Skillsz:
                      Skillsz = Skillsz.replace(",", " ")
                    List1=Skillsz.split(" ")
                    for eles in List1:
                      doc.append(Command("SkillsEntry", ["", f"{eles}"]))
                      doc.append(NoEscape(r"\vspace{0.2cm}"))


                    doc.append(NoEscape(r"\vspace{0.25cm}"))

                    doc.append(Command('sepspace'))

                    doc.append(Command('pagebreak'))

                    doc.append(Command('NewPart', ["Languages", NoEscape("")]))

                    if "," in Languages:
                      Languages = Languages.replace(",", " ")
                    List=Languages.split(" ")
                    for ele in List:
                      doc.append(Command("LanguagesEntry", ["", f"{ele}"]))
                      doc.append(NoEscape(r"\vspace{0.05cm}"))

                    doc.append(NoEscape(r"\vspace{0.25cm}"))


                    tex = doc.dumps()  # The document as string in LaTeX syntax

                    doc.generate_pdf(f"/content/drive/MyDrive/ApnaWEB/Users/{APP_ID}/assets/{APP_ID}_Resume")

                    break  # Exit the loop if there are no errors
              except Exception as e:
                  print(f"An error occurred: {e}")

          #Uploading Values into Completed Data-Sets
          k=0
          while k!=-1:
            if CPersonal_Details_DF.loc[k,"UNIQUE_ID"]==APP_ID:
              CPersonal_Details_DF.loc[k,"ADDRESS"],CPersonal_Details_DF.loc[k,"NAME"],CPersonal_Details_DF.loc[k,"SKILLS"],CPersonal_Details_DF.loc[k,"LANGUAGES"],CPersonal_Details_DF.loc[k,"HOBBIES"],CPersonal_Details_DF.loc[k,"OCCUPATION"]= Address,Name,Skillsz,Languages,Hobbies,Occupation
              CSkills_DF.loc[k,"SKILL1"],CSkills_DF.loc[k,"SKILL2"],CSkills_DF.loc[k,"SKILL3"],CSkills_DF.loc[k,"SKILL4"],CSkills_DF.loc[k,"SKILL5"]= Skill1,Skill2,Skill3,Skill4,Skill5
              CPersonal_Details_DF.loc[k,"DOB"],CPersonal_Details_DF.loc[k,"GENDER"],CPersonal_Details_DF.loc[k,"PHONE"],CPersonal_Details_DF.loc[k,"EMAIL"],CPersonal_Details_DF.loc[k,"PROFESSION"]= DOB,Gender,Phone,Email,Profession
              CPersonal_Details_DF.loc[k,"TWITTER"],CPersonal_Details_DF.loc[k,"INSTAGRAM"],CPersonal_Details_DF.loc[k,"GITHUB"],CPersonal_Details_DF.loc[k,"LINKEDIN"],CPersonal_Details_DF.loc[k,"FACEBOOK"]= Twitter,Instagram,GitHub,LinkedIn,Facebook
              CProjects_DF.loc[k,"PROJECT_1"],CProjects_DF.loc[k,"PROJECT_2"],CProjects_DF.loc[k,"PROJECT_3"]= Project1,Project2,Project3
              CEducation1_DF.loc[k,"INSTITUTE_NAME"],CEducation1_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation1_DF.loc[k,"FROM_YEAR"],CEducation1_DF.loc[k,"TO_YEAR"],CEducation1_DF.loc[k,"CGPA"]= Education1_Institution_Name,Education1_Institution_Address,Education1_Year_From,Education1_Year_To,Education1_CGPA
              CEducation2_DF.loc[k,"COURSE"],CEducation2_DF.loc[k,"INSTITUTE_NAME"],CEducation2_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation2_DF.loc[k,"FROM_YEAR"],CEducation2_DF.loc[k,"TO_YEAR"],CEducation2_DF.loc[k,"CGPA"]= Education2_Course,Education2_Institution_Name,Education2_Institution_Address,Education2_Year_From,Education2_Year_To,Education2_CGPA
              CEducation3_DF.loc[k,"COURSE"],CEducation3_DF.loc[k,"INSTITUTE_NAME"],CEducation3_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation3_DF.loc[k,"FROM_YEAR"],CEducation3_DF.loc[k,"TO_YEAR"],CEducation3_DF.loc[k,"CGPA"]= Education3_Course,Education3_Institution_Name,Education3_Institution_Address,Education3_Year_From,Education3_Year_To,Education3_CGPA
              CWorkexp1_DF.loc[k,"DESIGNATION"],CWorkexp1_DF.loc[k,"CORPORATION_NAME"],CWorkexp1_DF.loc[k,"FROM_YEAR"],CWorkexp1_DF.loc[k,"TO_YEAR"],CWorkexp1_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp1_Designation,Workexp1_Corp_Name,Workexp1_Year_From,Workexp1_Year_To,Workexp1_Significant
              CWorkexp2_DF.loc[k,"DESIGNATION"],CWorkexp2_DF.loc[k,"CORPORATION_NAME"],CWorkexp2_DF.loc[k,"FROM_YEAR"],CWorkexp2_DF.loc[k,"TO_YEAR"],CWorkexp2_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp2_Designation,Workexp2_Corp_Name,Workexp2_Year_From,Workexp2_Year_To,Workexp2_Significant
              CWorkexp3_DF.loc[k,"DESIGNATION"],CWorkexp3_DF.loc[k,"CORPORATION_NAME"],CWorkexp3_DF.loc[k,"FROM_YEAR"],CWorkexp3_DF.loc[k,"TO_YEAR"],CWorkexp3_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp3_Designation,Workexp3_Corp_Name,Workexp3_Year_From,Workexp3_Year_To,Workexp3_Significant
              break
            k+=1
          #Re-Uploading or Updating The Segregated Data-Sets on Drive
          CPersonal_Details_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Personal_Details.xlsx",index=None)
          CSkills_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/SKILLS.xlsx",index=None)
          CProjects_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Projects.xlsx",index=None)
          CEducation1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education1.xlsx",index=None)
          CEducation2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education2.xlsx",index=None)
          CEducation3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education3.xlsx",index=None)
          CWorkexp1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp1.xlsx",index=None)
          CWorkexp2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp2.xlsx",index=None)
          CWorkexp3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp3.xlsx",index=None)


        elif int(Template_ID)==1309:
          print("Using Template 2")
          App_ID = APP_ID
          Address1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}"
          os.makedirs(Address1, exist_ok=True)
          assets_path = os.path.join(Address1, 'assets')
          # Create the 'assets' directory if it doesn't exist
          os.makedirs(assets_path, exist_ok=True)
          Address1=f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets"

          source_path1 = "/content/drive/My Drive/ApnaWEB/Users/Default/Static_Mini_Project_2/assets/js"
          destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/js/"
          source_path2 = "/content/drive/My Drive/ApnaWEB/Users/Default/Static_Mini_Project_2/assets/images"
          destination_path2 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
          source_path3 = "/content/drive/My Drive/ApnaWEB/Users/Default/Static_Mini_Project_2/assets/css"
          destination_path3 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/css/"
          !cp -av "$source_path1" "$destination_path1"
          !cp -av "$source_path2" "$destination_path2"
          !cp -av "$source_path3" "$destination_path3"


          social_links = []
          if Twitter != "":
              social_links.append(f'''
              <li class="social-item">
                        <a href="{Twitter}" class="social-link">
                          <ion-icon name="logo-twitter"></ion-icon>
                        </a>
                      </li>
              ''')
          if Instagram != "":
              social_links.append(f'''
              <li class="social-item">
                        <a href="{Instagram}" class="social-link">
                          <ion-icon name="logo-instagram"></ion-icon>
                        </a>
                      </li>
              ''')
          if LinkedIn != "":
              social_links.append(f'''
              <li class="social-item">
                        <a href="{LinkedIn}" class="social-link">
                          <ion-icon name="logo-linkedin"></ion-icon>
                        </a>
                      </li>

              ''')
          if GitHub != "":
              social_links.append(f'''
              <li class="social-item">
                        <a href="{GitHub}" class="social-link">
                          <ion-icon name="logo-github"></ion-icon>
                        </a>
                      </li>
              ''')
          if Facebook != "":
              social_links.append(f'''
              <li class="social-item">
                        <a href="{Facebook}" class="social-link">
                          <ion-icon name="logo-facebook"></ion-icon>
                        </a>
                      </li>
              ''')
          #Joining all The Social-Links ie anchor-tags that are availabe Together
          social_links = "\n".join(social_links)


          #Image Synchronisation
          source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
          Profile_filename = f'''Profile_{First_Name}_{Phone}'''
          print(f"{Profile_filename}")
          # List all files in the source folder
          files = os.listdir(source_folder)
          # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
          pattern_1 = re.compile(f'^{re.escape(Profile_filename)}\..+$', re.IGNORECASE)
          # Initialize variables to store the found filename
          found_filename_1 = None
          # Check if any file matches the pattern
          for file in files:
            match = pattern_1.match(file)
            if match:
              found_filename_1 = file
              break
          if found_filename_1:
            Profiless=found_filename_1
            source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Profiless}"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"

          Sidebar_HTML=f'''
          <!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta http-equiv="X-UA-Compatible" content="IE=edge" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>{Name} - Personal Portfolio</title>
              <link
                rel="shortcut icon"
                href="./assets/images/Logo.svg"
                type="image/x-icon"
              />
              <!--
              - custom css link
            -->
              <link rel="stylesheet" href="./assets/css/style.css" />

              <!--
              - google font link
            -->
              <link rel="preconnect" href="https://fonts.googleapis.com" />
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
              <link
                href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap"
                rel="stylesheet"
              />
            </head>

            <body>
              <!--
              - #MAIN
            -->

              <main>
                <!--
                - #SIDEBAR
              -->

                <aside class="sidebar" data-sidebar>
                  <div class="sidebar-info">
                    <figure class="avatar-box">
                      <img
                        src="./assets/images/{Profiless}"
                        alt="{Name}"
                        width="80"
                      />
                    </figure>

                    <div class="info-content">
                      <h1 class="name" title="{Name}">{Name}</h1>

                      <p class="title">{Occupation}</p>
                    </div>

                    <button class="info_more-btn" data-sidebar-btn>
                      <span>Show Contacts</span>

                      <ion-icon name="chevron-down"></ion-icon>
                    </button>
                  </div>

                  <div class="sidebar-info_more">
                    <div class="separator"></div>

                    <ul class="contacts-list">
                      <li class="contact-item">
                        <div class="icon-box">
                          <ion-icon name="mail-outline"></ion-icon>
                        </div>

                        <div class="contact-info">
                          <p class="contact-title">Email</p>

                          <a href="mailto:{Email}" class="contact-link"
                            >{Email}</a
                          >
                        </div>
                      </li>

                      <li class="contact-item">
                        <div class="icon-box">
                          <ion-icon name="phone-portrait-outline"></ion-icon>
                        </div>

                        <div class="contact-info">
                          <p class="contact-title">Phone</p>

                          <a href="tel:+91-{Phone}" class="contact-link">{Phone_Number}</a>
                        </div>
                      </li>

                      <li class="contact-item">
                        <div class="icon-box">
                          <ion-icon name="calendar-outline"></ion-icon>
                        </div>

                        <div class="contact-info">
                          <p class="contact-title">Birthday</p>

                          <time>{DOB}</time>
                        </div>
                      </li>

                      <li class="contact-item">
                        <div class="icon-box">
                          <ion-icon name="location-outline"></ion-icon>
                        </div>

                        <div class="contact-info">
                          <p class="contact-title">Location</p>

                          <address>{Address}</address>
                        </div>
                      </li>
                    </ul>
                    <div class="separator"></div>
                    <ul class="social-list">
                    {social_links}
                    </ul>
                  </div>
                </aside>'''

          response = None
          while response is None:
            try:
              response = Gemini.generate_content(f''' Greetings! I'm Mokshith Balidi, a student at CBIT college in Hyderabad, India, pursuing a Bachelor's in Information Technology.
                          My passion lies in Frontend Frameworks, Logic Building, and Data Structures. I've applied my skills in projects using React, HTML, and CSS, gaining valuable real-world
                          experience.
                          Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for person named "{Name}" whose Gender is "{Gender}" who pursued {Course} in the college "{College}",wiht skillset of {Skillsz} in same number of Words. ''')
              Text = response.text
              Bio1=Text.replace("*","")
              Bio1=Bio1.title()
            except Exception as e:
                          print(f"An error occurred: {e}")


          response = None
          while response is None:
            try:
              response = Gemini.generate_content(f''' These immersive experiences have sharpened my technical skills and sparked my curiosity in data structures and operating systems. Beyond coding,
              I embrace a holistic approach to life, enjoying badminton matches, exploring the internet, and indulging in Netflix binges. I'm also the CEO and Founder of Codes and Bytes, passionate about
                pushing the boundaries of frontend development. Let's connect and explore possibilities together!
                          Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for person excelled skills in {Skillsz} and her hobbies {Hobbies}.
                          in same number of Words. ''')
              Text = response.text
              Bio2=Text.replace("*","")
              Bio2=Bio2.title()
            except Exception as e:
                          print(f"An error occurred: {e}")

          Total_Skills = []
          #Images Cordination Code for Logo Display
          Imgs=[]
          folder_path = '/content/drive/MyDrive/ApnaWEB/Skills_Logos'
          # Get the list of files in the folder
          files = os.listdir(folder_path)
          # Print the names of all files in the folder
          for file in files:
              Imgs.append(file.replace(".png",""))

          if Skill1 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''The most modern and high-quality design made at a professional level.. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for {Skill1} in strictly 12 words.''')
                Text=response1.text
                Skill1_Response=Text.replace("*","")
                Skill1_Response=Skill1_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

          #Image Cordination
          Skillsz1=Skill1
          Skillsz1=Skillsz1.lower().replace(" ","_")
          Imgs_Final1=[]
          pattern1 = r"\b{}\b".format(re.escape(Skillsz1))
          #Loop to Find Respective Image in the file
          for ele in Imgs:
            text = ele
            if re.search(pattern1, text):
                Imgs_Final1.append(ele)
                break
            else:
              pass
          if len(Imgs_Final1)!=0:
            Total_Skills.append(f'''
                          <li class="service-item">
                          <div class="service-icon-box">
                            <img
                              src="./assets/images/{Imgs_Final1[0]}.png
                          "
                              alt="design icon"
                              width="40"
                            />
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill1}</h4>

                            <p class="service-item-text">
                              {Skill1_Response}
                            </p>
                          </div>
                        </li>
            ''')
            source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"
          else:
            Total_Skills.append(f'''
            <li class="service-item">
                          <div class="service-icon-box">
                            <h1 style="font-weight: bold; color: #ffc270">{Skill1}</h1>
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill1}</h4>

                            <p class="service-item-text">
                              {Skill1_Response}
                            </p>
                          </div>
                        </li>
            ''')

          if Skill2 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''The most modern and high-quality design made at a professional level.. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for {Skill2} in strictly 12 words.''')
                Text=response1.text
                Skill2_Response=Text.replace("*","")
                Skill2_Response=Skill2_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

          #Image Cordination
          Skillsz1=Skill2
          Skillsz1=Skillsz1.lower().replace(" ","_")
          Imgs_Final1=[]
          pattern1 = r"\b{}\b".format(re.escape(Skillsz1))
          #Loop to Find Respective Image in the file
          for ele in Imgs:
            text = ele
            if re.search(pattern1, text):
                Imgs_Final1.append(ele)
                break
            else:
              pass
          if len(Imgs_Final1)!=0:
            Total_Skills.append(f'''
                          <li class="service-item">
                          <div class="service-icon-box">
                            <img
                              src="./assets/images/{Imgs_Final1[0]}.png
                          "
                              alt="design icon"
                              width="40"
                            />
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill2}</h4>

                            <p class="service-item-text">
                              {Skill2_Response}
                            </p>
                          </div>
                        </li>
            ''')
            source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"
          else:
            Total_Skills.append(f'''
            <li class="service-item">
                          <div class="service-icon-box">
                            <h1 style="font-weight: bold; color: #ffc270">{Skill2}</h1>
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill2}</h4>

                            <p class="service-item-text">
                              {Skill2_Response}
                            </p>
                          </div>
                        </li>
            ''')

          if Skill3 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''The most modern and high-quality design made at a professional level.. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for {Skill3} in strictly 12 words.''')
                Text=response1.text
                Skill3_Response=Text.replace("*","")
                Skill3_Response=Skill3_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

          #Image Cordination
          Skillsz1=Skill3
          Skillsz1=Skillsz1.lower().replace(" ","_")
          Imgs_Final1=[]
          pattern1 = r"\b{}\b".format(re.escape(Skillsz1))
          #Loop to Find Respective Image in the file
          for ele in Imgs:
            text = ele
            if re.search(pattern1, text):
                Imgs_Final1.append(ele)
                break
            else:
              pass
          if len(Imgs_Final1)!=0:
            Total_Skills.append(f'''
                          <li class="service-item">
                          <div class="service-icon-box">
                            <img
                              src="./assets/images/{Imgs_Final1[0]}.png
                          "
                              alt="design icon"
                              width="40"
                            />
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill3}</h4>

                            <p class="service-item-text">
                              {Skill3_Response}
                            </p>
                          </div>
                        </li>
            ''')
            source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"
          else:
            Total_Skills.append(f'''
            <li class="service-item">
                          <div class="service-icon-box">
                            <h1 style="font-weight: bold; color: #ffc270">{Skill3}</h1>
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill3}</h4>

                            <p class="service-item-text">
                              {Skill3_Response}
                            </p>
                          </div>
                        </li>
            ''')

          if Skill4 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''The most modern and high-quality design made at a professional level.. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for {Skill4} in strictly 12 words.''')
                Text=response1.text
                Skill4_Response=Text.replace("*","")
                Skill4_Response=Skill4_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

          #Image Cordination
          Skillsz1=Skill4
          Skillsz1=Skillsz1.lower().replace(" ","_")
          Imgs_Final1=[]
          pattern1 = r"\b{}\b".format(re.escape(Skillsz1))
          #Loop to Find Respective Image in the file
          for ele in Imgs:
            text = ele
            if re.search(pattern1, text):
                Imgs_Final1.append(ele)
                break
            else:
              pass
          if len(Imgs_Final1)!=0:
            Total_Skills.append(f'''
                          <li class="service-item">
                          <div class="service-icon-box">
                            <img
                              src="./assets/images/{Imgs_Final1[0]}.png
                          "
                              alt="design icon"
                              width="40"
                            />
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill4}</h4>

                            <p class="service-item-text">
                              {Skill4_Response}
                            </p>
                          </div>
                        </li>
            ''')
            source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"
          else:
            Total_Skills.append(f'''
            <li class="service-item">
                          <div class="service-icon-box">
                            <h1 style="font-weight: bold; color: #ffc270">{Skill4}</h1>
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill4}</h4>

                            <p class="service-item-text">
                              {Skill4_Response}
                            </p>
                          </div>
                        </li>
            ''')

          if Skill5 != "":
            response1=None
            while response1 is None:
              try:
                response1 = Gemini.generate_content(f'''The most modern and high-quality design made at a professional level.. Create Similarly but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for {Skill5} in strictly 12 words.''')
                Text=response1.text
                Skill5_Response=Text.replace("*","")
                Skill5_Response=Skill5_Response.title()
                break
              except Exception as e:
                print(f"An error occurred: {e}")

          #Image Cordination
          Skillsz1=Skill5
          Skillsz1=Skillsz1.lower().replace(" ","_")
          Imgs_Final1=[]
          pattern1 = r"\b{}\b".format(re.escape(Skillsz1))
          #Loop to Find Respective Image in the file
          for ele in Imgs:
            text = ele
            if re.search(pattern1, text):
                Imgs_Final1.append(ele)
                break
            else:
              pass
          if len(Imgs_Final1)!=0:
            Total_Skills.append(f'''
                          <li class="service-item">
                          <div class="service-icon-box">
                            <img
                              src="./assets/images/{Imgs_Final1[0]}.png
                          "
                              alt="design icon"
                              width="40"
                            />
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill5}</h4>

                            <p class="service-item-text">
                              {Skill5_Response}
                            </p>
                          </div>
                        </li>
            ''')
            source_path1 = f"/content/drive/My Drive/ApnaWEB/Skills_Logos/{Imgs_Final1[0]}.png"
            destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
            !cp -av "$source_path1" "$destination_path1"
          else:
            Total_Skills.append(f'''
            <li class="service-item">
                          <div class="service-icon-box">
                            <h1 style="font-weight: bold; color: #ffc270">{Skill5}</h1>
                          </div>

                          <div class="service-content-box">
                            <h4 class="h4 service-item-title">{Skill5}</h4>

                            <p class="service-item-text">
                              {Skill5_Response}
                            </p>
                          </div>
                        </li>
            ''')

          if len(Total_Skills)!=0:
            Skills = "\n".join(Total_Skills)
            Skills_HTML = f'''
                    {Skills}
            '''
          else:
            Skills_HTML='''\n'''


          Main_HTML=f'''      <!--
                - #main-content
              -->

                <div class="main-content">
                  <!--
                  - #NAVBAR
                -->

                  <nav class="navbar">
                    <ul class="navbar-list">
                      <li class="navbar-item">
                        <button class="navbar-link active" data-nav-link>About</button>
                      </li>

                      <li class="navbar-item">
                        <button class="navbar-link" data-nav-link>Resume</button>
                      </li>

                      <li class="navbar-item">
                        <button class="navbar-link" data-nav-link>Portfolio</button>
                      </li>

                      <li class="navbar-item">
                        <button class="navbar-link" data-nav-link>Contact</button>
                      </li>
                    </ul>
                  </nav>

                  <!--
                  - #ABOUT
                -->

                  <article class="about active" data-page="about">
                    <header>
                      <h2 class="h2 article-title">About me</h2>
                    </header>

                    <section class="about-text">
                      <p>
                        {Bio1}
                      </p>

                      <p>
                        {Bio2}
                      </p>
                    </section>

                    <!--
                    - service
                  -->

                    <section class="service">
                      <h3 class="h3 service-title">My Skills</h3>

                      <ul class="service-list">
                        {Skills_HTML}
                      </ul>
                    </section>
                    </article>
          '''

          #Education HTML Code
          response6,response7,response8=None,None,None
          while response6 is None:
            try:
              response6=Gemini.generate_content(f'''Excelled in Information Technology studies, mastering database
                                management, network security, software development, systems
                                analysis, and cybersecurity fundamentals. Proven ability in IT
                                project management, showcasing a commitment to excellence and
                                readiness for real-world challenges.Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone who is studying {Education3_Course} in {Education3_Institution_Name} {Education3_Institution_Address} from year {(Education3_Year_From)} to{(Education3_Year_To)} in 30 words.Use I dont use name''')
              Text=response6.text
              Education3=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")
          while response7 is None:
            try:
              response7=Gemini.generate_content(f'''Intermediate (10+1 & 10+2) Narayana Jr. College, Jubilee
                                Hills, Hyderabad Completed with distinction, achieving an
                                outstanding 96% overall. Excelling in diverse subjects, I
                                demonstrated a strong academic foundation and commitment to
                                excellence..Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone who is studying {Education2_Course} in {Education2_Institution_Name} {Education2_Institution_Address} from year {(Education2_Year_From)} to{(Education2_Year_To)} in 30 words.Use I dont use name''')
              Text=response7.text
              Education2=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")
          while response8 is None:
            try:
              response8=Gemini.generate_content(f'''Exemplary performance in high school with outstanding results,
                                highlighting my dedication to academic excellence.
                                Demonstrated proficiency across subjects, leadership in
                                extracurricular activities, and a commitment to personal and
                                scholastic growth..Similarly Generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone who is studied High SChool 10th class in {Education1_Institution_Name} {Education3_Institution_Address} from year {(Education1_Year_From)} to{(Education1_Year_To)} in 30 words.Use I dont use name''')
              Text=response8.text
              Education1=Text.replace("*","")
              break
            except Exception as e:
                  print(f"An error occurred: {e}")

          #WorkExp HTML Dynamic Code Generation
          response9,response10,response11=None,None,None
          Workexp_Code=[]
          if Workexp3_Designation != "":
            while response9 is None:
              try:
                response9=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone holding the designation {Workexp3_Designation},in the corporation {Workexp3_Corp_Name} from year {int(Workexp3_Year_From)} to year {int(Workexp3_Year_To)} in 30 words''')
                Text=response9.text
                Workexp3=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''
                        <li class="timeline-item">
                        <h4 class="h4 timeline-item-title">{Workexp3_Corp_Name}</h4><br>
                          <h4 class="h4 timeline-item-title">{Workexp3_Designation}</h4>

                          <span>{int(Workexp3_Year_From)}-{int(Workexp3_Year_To)}</span>

                          <p class="timeline-text">
                            {Workexp3}
                          </p>
                        </li>''')
          if Workexp2_Designation != "":
            while response10 is None:
              try:
                response10=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone holding the designation {Workexp2_Designation},in the corporation {Workexp2_Corp_Name} from year {int(Workexp2_Year_From)} to year {int(Workexp2_Year_To)} in 30 words''')
                Text=response10.text
                Workexp2=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''<li class="timeline-item">
                        <h4 class="h4 timeline-item-title">{Workexp2_Corp_Name}</h4><br>
                          <h4 class="h4 timeline-item-title">{Workexp2_Designation}</h4>

                          <span>{int(Workexp2_Year_From)}-{int(Workexp2_Year_To)}</span>

                          <p class="timeline-text">
                            {Workexp2}
                          </p>
                        </li>''')
          if Workexp1_Designation != "":
            while response11 is None:
              try:
                response11=Gemini.generate_content(f'''Placement Drive (Codesprint): Spearheaded a comprehensive web
                                  development project utilizing the MERN stack, showcasing
                                  proficiency in full-stack development. Engineered a seamless
                                  platform for placement drives, enhancing the recruitment
                                  process. Similarly generate but DONT INCLUDE ANYTHING FROM THE ABOVE REFRENCE PASSAGE, for someone holding the designation {Workexp1_Designation},in the corporation {Workexp1_Corp_Name} from year {int(Workexp1_Year_From)} to year {int(Workexp1_Year_To)} in 30 words''')
                Text=response11.text
                Workexp1=Text.replace("*","")
              except Exception as e:
                    print(f"An error occurred: {e}")
            Workexp_Code.append(f'''
                          <li class="timeline-item">
                        <h4 class="h4 timeline-item-title">{Workexp1_Corp_Name}</h4><br>
                          <h4 class="h4 timeline-item-title">{Workexp1_Designation}</h4>

                          <span>{int(Workexp1_Year_From)}-{int(Workexp1_Year_To)}</span>

                          <p class="timeline-text">
                            {Workexp1}
                          </p>
                        </li>
                      ''')
          if len(Workexp_Code)!=0:
            Work_Experience_Finals="\n".join(Workexp_Code)
            Workexp_HTML_Code=f'''<section class="timeline">
                      <div class="title-wrapper">
                        <div class="icon-box">
                          <ion-icon name="book-outline"></ion-icon>
                        </div>

                        <h3 class="h3">Work Experience</h3>
                      </div>

                      <ol class="timeline-list">
                          {Work_Experience_Finals}
                          </ol>
                    </section>
            '''
          else:
            Workexp_HTML_Code=''''''

          if "," in Languages:
            Languages = Languages.replace(",", " ")
          List=Languages.split(" ")
          Languages_HTML=[]
          for ele in List:
            Languages_HTML.append(f''' <li class="skills-item">
                          <div class="title-wrapper">
                            <h5 class="h5">{ele}</h5>
                          </div>
                        </li>''')
          if len(Languages_HTML)!=0:
            Languages_HTML_Code="\n".join(Languages_HTML)
            Languages_HTML_Code=f'''<section class="skill">
                      <h3 class="h3 skills-title">Languages Known</h3>
                      <ul class="skills-list content-card">
                        {Languages_HTML_Code}
                      </ul>
                    </section>'''
          else:
            Languages_HTML_Code=''''''



          Resume_HTML=f'''
          <!--
                  - #RESUME
                -->

                  <article class="resume" data-page="resume">
                    <header>
                      <h2 class="h2 article-title">Resume</h2>
                    </header>

                    <section class="timeline">
                      <div class="title-wrapper">
                        <div class="icon-box">
                          <ion-icon name="book-outline"></ion-icon>
                        </div>

                        <h3 class="h3">Education</h3>
                      </div>

                      <ol class="timeline-list">
                        <li class="timeline-item">
                          <h4 class="h4 timeline-item-title">
                            {Education3_Institution_Name}, {Education3_Institution_Address}
                          </h4>

                          <span>{(Education3_Year_From)}-{(Education3_Year_To)}</span>

                          <p class="timeline-text">
                            {Education3}
                          </p>
                        </li>

                        <li class="timeline-item">
                          <h4 class="h4 timeline-item-title">{Education2_Institution_Name}, {Education2_Institution_Address}</h4>

                          <span>{(Education2_Year_From)}-{(Education2_Year_To)}</span>

                          <p class="timeline-text">
                            {Education2}
                          </p>
                        </li>

                        <li class="timeline-item">
                          <h4 class="h4 timeline-item-title">
                            {Education1_Institution_Name}, {Education1_Institution_Address}
                          </h4>

                          <span>{(Education1_Year_From)}-{(Education1_Year_To)}</span>

                          <p class="timeline-text">
                            {Education1}
                          </p>
                        </li>
                      </ol>
                    </section>

                    {Workexp_HTML_Code}

                    {Languages_HTML_Code}
                  </article>
                  '''
          Projects=[]
          if Project1 != "":
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project1_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(re.escape(Profile_filename) + r'\s*.*\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project1ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project1ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
                !cp -av "$source_path1" "$destination_path1"

            Projects.append(f'''<li
                          class="project-item active"
                          data-filter-item
                          data-category="web development"
                        >
                          <a href="#">
                            <figure class="project-img">
                              <div class="project-item-icon-box">
                                <ion-icon name="eye-outline"></ion-icon>
                              </div>
                              <img
                                src="./assets/images/{Project1ss}"
                                alt="finance"
                                loading="lazy"
                              />
                            </figure>
                            <h3 class="project-title">{Project1}</h3>
                          </a>
                        </li>''')
          if Project2 != "":
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project2_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(re.escape(Profile_filename) + r'\s*.*\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project2ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project2ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
                !cp -av "$source_path1" "$destination_path1"
            Projects.append(f'''<li
                          class="project-item active"
                          data-filter-item
                          data-category="web development"
                        >
                          <a href="#">
                            <figure class="project-img">
                              <div class="project-item-icon-box">
                                <ion-icon name="eye-outline"></ion-icon>
                              </div>
                              <img
                                src="./assets/images/{Project2ss}"
                                alt="finance"
                                loading="lazy"
                              />
                            </figure>
                            <h3 class="project-title">{Project2}</h3>
                          </a>
                        </li>''')
          if Project3 != "":
            #Image Synchronisation
            source_folder = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"
            Profile_filename = f'''Project3_{First_Name}_{Phone}'''
            # List all files in the source folder
            files = os.listdir(source_folder)
            # Create a regex pattern to match filenames starting with 'filename' and ending with any extension
            pattern_1 = re.compile(re.escape(Profile_filename) + r'\s*.*\..+$', re.IGNORECASE)
            # Initialize variables to store the found filename
            found_filename_1 = None
            # Check if any file matches the pattern
            for file in files:
                match = pattern_1.match(file)
                if match:
                    found_filename_1 = file
                    break
            if found_filename_1:
                Project3ss=found_filename_1
                source_path1 = f"/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/{Project3ss}"
                destination_path1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}/assets/images/"
                !cp -av "$source_path1" "$destination_path1"
            Projects.append(f'''<li
                          class="project-item active"
                          data-filter-item
                          data-category="web development"
                        >
                          <a href="#">
                            <figure class="project-img">
                              <div class="project-item-icon-box">
                                <ion-icon name="eye-outline"></ion-icon>
                              </div>
                              <img
                                src="./assets/images/{Project3ss}"
                                alt="finance"
                                loading="lazy"
                              />
                            </figure>
                            <h3 class="project-title">{Project3}</h3>
                          </a>
                        </li>''')
          if len(Projects)!=0:
            Projects="\n".join(Projects)
            Projects_HTML_Code = f'''
                    <article class="portfolio" data-page="portfolio">
                    <header>
                      <h2 class="h2 article-title">Portfolio</h2>
                    </header>

                    <section class="projects">
                      <ul class="filter-list">
                        <li class="filter-item">
                          <button class="active" data-filter-btn>All</button>
                        </li>
                      </ul>
                      <ul class="project-list">
                      {Projects}
                      </ul>
                    </section>
                  </article>
            '''
          else:
            Projects_HTML_Code='''\n'''

          Last_HTML=f'''<!--
                - #CONTACT
              -->

                  <article class="contact" data-page="contact">
                    <header>
                      <h2 class="h2 article-title">Contact</h2>
                    </header>
                    <section class="contact-form">
                      <h3 class="h3 form-title">Contact Form</h3>

                      <form action="https://api.web3forms.com/submit" class="form" method="post" data-form>
                      <input type="hidden" name="access_key" value="0372130d-8c93-403c-a40b-b4cb811d5253">
                        <div class="input-wrapper">
                          <input
                            type="text"
                            name="fullname"
                            class="form-input"
                            placeholder="Full name"
                            required
                            data-form-input
                          />

                          <input
                            type="email"
                            name="email"
                            class="form-input"
                            placeholder="Email address"
                            required
                            data-form-input
                          />
                        </div>

                        <textarea
                          name="message"
                          class="form-input"
                          placeholder="Your Message"
                          required
                          data-form-input
                        ></textarea>

                        <button class="form-btn" type="submit" disabled data-form-btn>
                          <ion-icon name="paper-plane"></ion-icon>
                          <span>Send Message</span>
                        </button>
                      </form>
                    </section>
                  </article>
                </div>
              </main>

              <!--
            - custom js link
          -->
              <script src="./assets/js/script.js"></script>

              <!--
            - ionicon link
          -->
              <script
                type="module"
                src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js"
              ></script>
              <script
                nomodule
                src="https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js"
              ></script>
            </body>
          </html>

          Dear {Name},

  Congratulations on having your own website through ApnaWeb! We are thrilled to see your online presence come to life. Your website, https://codes-bytes.github.io/{APP_ID}/, is a fantastic achievement that showcases your unique identity and offerings to the world.

  Your Portfolio's Link is : https://codes-bytes.github.io/{APP_ID}/

  Having a personal website opens up a world of opportunities for you to connect, share, and grow. Whether you're showcasing your work, sharing your thoughts, or building your brand, your website is the perfect platform to express yourself and reach a wider audience.

  If you have any queries or need assistance with your website, feel free to contact me directly at codesandbytes@gmail.com. I am here to help you make the most of your online presence.

  We wish you all the success with your new website and look forward to seeing how it evolves and grows over time. Congratulations once again, and best wishes for your online journey ahead!

  Warm regards,

  MOKSHITH BALIDI (CEO, FOUNDER CODES & BYTES)
  ApnaWeb -->

  <!--users mail is : {Email}-->

          '''



          Complete_Home_HTML=Sidebar_HTML+Main_HTML+Resume_HTML+Projects_HTML_Code+Last_HTML


          App_ID = App_ID
          Address1 = f"/content/drive/My Drive/ApnaWEB/Users/{App_ID}"
          os.makedirs(Address1, exist_ok=True)

          with open(f'{Address1}/index.txt', 'w') as f:
            f.write(f'{Complete_Home_HTML}')

          import os
          thisFile = f"{Address1}/index.txt"
          base = os.path.splitext(thisFile)[0]
          os.rename(thisFile, base + ".html")

          #Whole  of LATEX Part

          while True:
              try:
                class MyName(CommandBase):
                    _latex_name = 'MyName'

                class MySlogan(CommandBase):
                    _latex_name = 'MySlogan'

                class NewPart(CommandBase):
                    _latex_name = 'NewPart'

                class PersonalEntry(CommandBase):
                    _latex_name = 'PersonalEntry'

                class SkillsEntry(CommandBase):
                    _latex_name = 'SkillsEntry'

                class EducationEntry(CommandBase):
                    _latex_name = 'EducationEntry'

                class WorkEntry(CommandBase):
                    _latex_name = 'WorkEntry'

                if __name__ == '__main__':
                    doc = Document(documentclass='scrartcl', document_options=["paper=a4", "fontsize=11pt"])

                    doc.preamble.append(Package('mdframed'))
                    doc.preamble.append(Package('babel', options="english"))
                    doc.preamble.append(Package('microtype', options="protrusion=true,expansion=true"))
                    doc.preamble.append(Package('amsmath'))
                    doc.preamble.append(Package('amsfonts'))
                    doc.preamble.append(Package('amsthm'))
                    doc.preamble.append(Package('graphicx'))
                    doc.preamble.append(Package('xcolor', options="svgnames"))
                    doc.preamble.append(Package('geometry'))
                    doc.preamble.append(Package('url'))
                    doc.preamble.append(Package('sectsty'))

                    doc.append(Command('frenchspacing'))
                    doc.append(Command('pagestyle', 'empty'))

                    doc.append(Command("textheight=700px"))

                    doc.append(Command("sectionfont", NoEscape(r""" \usefont{OT1}{phv}{b}{n} \sectionrule{0pt}{0pt}{-5pt}{3pt}}""")))

                    doc.append(Command("newlength", Command("spacebox")))
                    doc.append(Command("settowidth", [Command("spacebox"), "8888888888"]))

                    sepspace = UnsafeCommand('newcommand', r'\sepspace',
                                            extra_arguments=r"""
                                            \vspace*{1em}
                """)
                    doc.append(sepspace)

                    MyName = UnsafeCommand('newcommand', r'\MyName', options=1,
                                extra_arguments=r"""
                      \vspace*{-2cm}
                      \begin{center}
                      \Huge \usefont{OT1}{phv}{b}{n} #1
                      \par \normalsize \normalfont
                      \end{center}
          """)
                    doc.append(MyName)

                    MySlogan = UnsafeCommand('newcommand', r'\MySlogan', options=1,
                                  extra_arguments=r"""
                  \vspace*{-0.6cm}
                  \begin{center}
                  \large \usefont{OT1}{phv}{m}{n} \textit{#1}
                  \par \normalsize \normalfont
                  \end{center}
          """)
                    doc.append(MySlogan)


                    NewPart = UnsafeCommand('newcommand', r'\NewPart', options=1,
                                            extra_arguments=r"""
                                            \section*{\uppercase{#1}}
                """)
                    doc.append(NewPart)


                    ShortResume = UnsafeCommand('newcommand', r'\ShortResume', options=1,
                                  extra_arguments=r"""
                                  \vspace{0.5cm} % Adjust the space as needed
                                  \begin{center}
                                  \Large \textbf{Short Resume}
                                  \end{center}
                                  \par \normalsize \normalfont
          """)

                    doc.append(ShortResume)

                    PersonalEntry = UnsafeCommand('newcommand', r'\PersonalEntry', options=2,
                                        extra_arguments=r"""
              \noindent\begin{tabular}{@{}p{3cm}p{\dimexpr\linewidth-3cm}@{}}
                  \textbf{#1} & #2 \\
              \end{tabular}
              \vspace{0.2cm}  % Adjust the space as needed
          """)

                    doc.append(PersonalEntry)

                    SkillsEntry = UnsafeCommand('newcommand', r'\SkillsEntry', options=2,
                                      extra_arguments=r"""
                                      \noindent\hangindent=2em\hangafter=0 % Indentation
                                      \textbf{\Large #1} \par          % Entry name (bold and large)
                                      \hspace*{1.5em} #2 \par          % Entry value
          """)


                    doc.append(SkillsEntry)

                    LanguagesEntry = UnsafeCommand('newcommand', r'\LanguagesEntry', options=2,
                                      extra_arguments=r"""
                                      \noindent\hangindent=2em\hangafter=0 % Indentation
                                      \textbf{\Large #1} \par          % Entry name (bold and large)
                                      \hspace*{1.5em} #2 \par          % Entry value
          """)


                    doc.append(LanguagesEntry)

                    EducationEntry = UnsafeCommand('newcommand', r'\EducationEntry', options=5,
                                              extra_arguments=r"""
                    \noindent \textbf{#1} \hfill      % Study
                    \colorbox{Black}{%
                        \parbox{6em}{%
                        \hfill\color{White}#2}} \par  % Duration
                    \noindent \textit{#3} \par        % School
                    \noindent \textit{#4} \par        % Address
                    \noindent \small #5 \par         % Description
                    \normalsize \par
                """)
                    doc.append(EducationEntry)


                    WorkEntry = UnsafeCommand('newcommand', r'\WorkEntry', options=4,
                                              extra_arguments=r"""
#                         % Same as \EducationEntry
                        \noindent \textbf{#1} \hfill      % Jobname
                        \colorbox{Black}{\color{White}#2} \par  % Duration
                        \noindent \textit{#3} \par              % Company
                        \noindent\hangindent=2em\hangafter=0 \small #4 % Description
                        \normalsize \par
                """)
                    doc.append(WorkEntry)

                    doc.append(Command("MyName", f"{Name}"))
                    doc.append(Command('MySlogan', f"{Profession}"))

                    doc.append(Command('sepspace'))

                    doc.append(Command('NewPart', ["Personal details", NoEscape("")]))


                    doc.append(Command('PersonalEntry', [" ", " "]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Father's Name", f"{Father_Name}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Mother's Name", f"{Mother_Name}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Date Of Birth", f"{DOB}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Gender", f"{Gender}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Address", f"{Address}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Phone", f"{Phone}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Email", f"{Email}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command('PersonalEntry', ["Portfolio", f"https://codes-bytes.github.io/{APP_ID}/"]))

                    doc.append(Command('NewPart', ["Short Resume Details", NoEscape("")]))
                    doc.append(f"{Bio1} \n {Bio2}")

                    doc.append(Command('pagebreak'))

                    doc.append(Command('NewPart', ["Education details", NoEscape("")]))

                    doc.append(Command("EducationEntry", ["UNDER GRADUATION", NoEscape(f"{(Education3_Year_From)}-{(Education3_Year_To)}"), f"{Education3_Institution_Name},",f"{Education3_Institution_Address}", f"{Education3}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command("EducationEntry", ["HIGH SCHOOL | EQUIVALENT", NoEscape(f"{(Education2_Year_From)}-{(Education2_Year_To)}"), f"{Education2_Institution_Name},", f"{Education2_Institution_Address}", f"{Education2}"]))
                    doc.append(NoEscape(r"\vspace{0.2cm}"))
                    doc.append(Command("EducationEntry", ["MATRICULATION | EQUIVALENT", NoEscape(f"{(Education1_Year_From)}-{(Education1_Year_To)}"), f"{Education1_Institution_Name},",f"{Education1_Institution_Address}",f"{Education1}"]))

                    doc.append(Command('sepspace'))

                    if Workexp3_Designation != "" or Workexp2_Designation != "" or Workexp1_Designation != "":
                      doc.append(Command('NewPart', ["Work details", NoEscape("")]))

                    if Workexp3_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp3_Designation}", NoEscape(f"{int(Workexp3_Year_From)}-{int(Workexp3_Year_To)}"), f"{Workexp3_Corp_Name}", f'''{Workexp3}''']))
                      doc.append(Command('sepspace'))
                    if Workexp2_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp2_Designation}", NoEscape(f"{int(Workexp2_Year_From)}-{int(Workexp2_Year_To)}"), f"{Workexp2_Corp_Name}", f'''{Workexp2}''']))
                      doc.append(Command('sepspace'))
                    if Workexp1_Designation != "":
                      doc.append(Command("WorkEntry", [f"{Workexp1_Designation}", NoEscape(f"{int(Workexp1_Year_From)}-{int(Workexp1_Year_To)}"), f"{Workexp1_Corp_Name}", f'''{Workexp1}''']))
                      doc.append(Command('sepspace'))

                    doc.append(Command('NewPart', ["Skills", NoEscape("")]))
                    if "," in Skillsz:
                      Skillsz = Skillsz.replace(",", " ")
                    List1=Skillsz.split(" ")
                    for eles in List1:
                      doc.append(Command("SkillsEntry", ["", f"{eles}"]))
                      doc.append(NoEscape(r"\vspace{0.2cm}"))


                    doc.append(NoEscape(r"\vspace{0.25cm}"))

                    doc.append(Command('sepspace'))

                    doc.append(Command('pagebreak'))

                    doc.append(Command('NewPart', ["Languages", NoEscape("")]))



                    if "," in Languages:
                      Languages = Languages.replace(",", " ")
                    List=Languages.split(" ")
                    for ele in List:
                      doc.append(Command("LanguagesEntry", ["", f"{ele}"]))
                      doc.append(NoEscape(r"\vspace{0.05cm}"))

                    doc.append(NoEscape(r"\vspace{0.25cm}"))



                    tex = doc.dumps()  # The document as string in LaTeX syntax

                    doc.generate_pdf(f"/content/drive/MyDrive/ApnaWEB/Users/{APP_ID}/assets/{APP_ID}_Resume")

                    break  # Exit the loop if there are no errors
              except Exception as e:
                  print(f"An error occurred: {e}")



          #Uploading Values into Completed Data-Sets
          k=0
          while k!=-1:
            if CPersonal_Details_DF.loc[k,"UNIQUE_ID"]==APP_ID:
              CPersonal_Details_DF.loc[k,"ADDRESS"],CPersonal_Details_DF.loc[k,"NAME"],CPersonal_Details_DF.loc[k,"SKILLS"],CPersonal_Details_DF.loc[k,"LANGUAGES"],CPersonal_Details_DF.loc[k,"HOBBIES"],CPersonal_Details_DF.loc[k,"OCCUPATION"]= Address,Name,Skillsz,Languages,Hobbies,Occupation
              CSkills_DF.loc[k,"SKILL1"],CSkills_DF.loc[k,"SKILL2"],CSkills_DF.loc[k,"SKILL3"],CSkills_DF.loc[k,"SKILL4"],CSkills_DF.loc[k,"SKILL5"]= Skill1,Skill2,Skill3,Skill4,Skill5
              CPersonal_Details_DF.loc[k,"DOB"],CPersonal_Details_DF.loc[k,"GENDER"],CPersonal_Details_DF.loc[k,"PHONE"],CPersonal_Details_DF.loc[k,"EMAIL"],CPersonal_Details_DF.loc[k,"PROFESSION"]= DOB,Gender,Phone,Email,Profession
              CPersonal_Details_DF.loc[k,"TWITTER"],CPersonal_Details_DF.loc[k,"INSTAGRAM"],CPersonal_Details_DF.loc[k,"GITHUB"],CPersonal_Details_DF.loc[k,"LINKEDIN"],CPersonal_Details_DF.loc[k,"FACEBOOK"]= Twitter,Instagram,GitHub,LinkedIn,Facebook
              CProjects_DF.loc[k,"PROJECT_1"],CProjects_DF.loc[k,"PROJECT_2"],CProjects_DF.loc[k,"PROJECT_3"]= Project1,Project2,Project3
              CEducation1_DF.loc[k,"INSTITUTE_NAME"],CEducation1_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation1_DF.loc[k,"FROM_YEAR"],CEducation1_DF.loc[k,"TO_YEAR"],CEducation1_DF.loc[k,"CGPA"]= Education1_Institution_Name,Education1_Institution_Address,Education1_Year_From,Education1_Year_To,Education1_CGPA
              CEducation2_DF.loc[k,"COURSE"],CEducation2_DF.loc[k,"INSTITUTE_NAME"],CEducation2_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation2_DF.loc[k,"FROM_YEAR"],CEducation2_DF.loc[k,"TO_YEAR"],CEducation2_DF.loc[k,"CGPA"]= Education2_Course,Education2_Institution_Name,Education2_Institution_Address,Education2_Year_From,Education2_Year_To,Education2_CGPA
              CEducation3_DF.loc[k,"COURSE"],CEducation3_DF.loc[k,"INSTITUTE_NAME"],CEducation3_DF.loc[k,"INSTITUTE_ADDRESS"],CEducation3_DF.loc[k,"FROM_YEAR"],CEducation3_DF.loc[k,"TO_YEAR"],CEducation3_DF.loc[k,"CGPA"]= Education3_Course,Education3_Institution_Name,Education3_Institution_Address,Education3_Year_From,Education3_Year_To,Education3_CGPA
              CWorkexp1_DF.loc[k,"DESIGNATION"],CWorkexp1_DF.loc[k,"CORPORATION_NAME"],CWorkexp1_DF.loc[k,"FROM_YEAR"],CWorkexp1_DF.loc[k,"TO_YEAR"],CWorkexp1_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp1_Designation,Workexp1_Corp_Name,Workexp1_Year_From,Workexp1_Year_To,Workexp1_Significant
              CWorkexp2_DF.loc[k,"DESIGNATION"],CWorkexp2_DF.loc[k,"CORPORATION_NAME"],CWorkexp2_DF.loc[k,"FROM_YEAR"],CWorkexp2_DF.loc[k,"TO_YEAR"],CWorkexp2_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp2_Designation,Workexp2_Corp_Name,Workexp2_Year_From,Workexp2_Year_To,Workexp2_Significant
              CWorkexp3_DF.loc[k,"DESIGNATION"],CWorkexp3_DF.loc[k,"CORPORATION_NAME"],CWorkexp3_DF.loc[k,"FROM_YEAR"],CWorkexp3_DF.loc[k,"TO_YEAR"],CWorkexp3_DF.loc[k,"SIGNIFICANT_CONTRIBUTION"]= Workexp3_Designation,Workexp3_Corp_Name,Workexp3_Year_From,Workexp3_Year_To,Workexp3_Significant
              break
            k+=1
          #Re-Uploading or Updating The Segregated Data-Sets on Drive
          CPersonal_Details_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Personal_Details.xlsx",index=None)
          CSkills_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/SKILLS.xlsx",index=None)
          CProjects_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Projects.xlsx",index=None)
          CEducation1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education1.xlsx",index=None)
          CEducation2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education2.xlsx",index=None)
          CEducation3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Education3.xlsx",index=None)
          CWorkexp1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp1.xlsx",index=None)
          CWorkexp2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp2.xlsx",index=None)
          CWorkexp3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_COMPLETED/SEGREGATED/Workexp3.xlsx",index=None)



#Deleting Existing Records in Pending-Segregated Data of Drive
for df in [Personal_Details_DF,Skills_DF,Projects_DF, Education1_DF, Education2_DF, Education3_DF, Workexp1_DF, Workexp2_DF, Workexp3_DF]:
    df.drop(df[df["UNIQUE_ID"].isin(emp_lst)].index, inplace=True)

#Re-Uploading or Updating The Segregated Data-Sets on Drive
Personal_Details_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Personal_Details.xlsx",index=None)
Skills_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/SKILLS.xlsx",index=None)
Projects_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Projects.xlsx",index=None)
Education1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education1.xlsx",index=None)
Education2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education2.xlsx",index=None)
Education3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Education3.xlsx",index=None)
Workexp1_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp1.xlsx",index=None)
Workexp2_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp2.xlsx",index=None)
Workexp3_DF.to_excel("/content/drive/MyDrive/ApnaWEB/DATA/USER_DATA_PENDING/SEGREGATED/Workexp3.xlsx",index=None)

def delete_images_in_folder(folder_path):
    # Iterate over all files in the folder
    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)

        # Check if the file is an image (you can add more extensions as needed)
        if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
            try:
                os.remove(file_path)
                print(f"Deleted {filename}")
            except Exception as e:
                print(f"Failed to delete {filename}: {e}")

# Specify the folder path where images are located in your Google Drive
folder_path = "/content/drive/MyDrive/ApnaWEB/DATA/Unsegregated_Images/"

# Call the function to delete images
delete_images_in_folder(folder_path)



